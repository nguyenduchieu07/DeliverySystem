@model BookingRequestVM
@{
    ViewData["Title"] = "Đặt dịch vụ kho";
}

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

<!-- Custom CSS -->
<link rel="stylesheet" href="~/css/vcn-auth.css" />

<div class="delivery-page">
    <!-- Left Sidebar - Order Form (60%) -->
    <div class="delivery-sidebar">
        <!-- Navigation Tabs -->
        <div class="nav-tabs">
            <a href="#" class="nav-tab active">Dịch vụ kho</a>
            <a href="@Url.Action("Orders", "Delivery")" class="nav-tab">Đơn hàng</a>
            <a href="@Url.Action("Wallet", "Account")" class="nav-tab">Thanh toán</a>
        </div>

        <!-- Delivery Form -->
        <div class="delivery-form">
            @using (Html.BeginForm("BookDelivery", "Delivery", FormMethod.Post, new { id = "deliveryForm" }))
            {
                @Html.AntiForgeryToken()

                <!-- Date Selection -->
                <div class="date-section">
                    <div class="section-title" style="margin-bottom: 15px;">Thời gian lưu kho</div>
                    <div class="date-row">
                        <div class="date-group">
                            <label class="date-label">Ngày nhập kho<span class="required">*</span></label>
                            <input type="date" class="date-input" id="storageStartDate" name="StorageStartDate" required>
                        </div>
                        <div class="date-group">
                            <label class="date-label">Ngày xuất kho<span class="required">*</span></label>
                            <input type="date" class="date-input" id="storageEndDate" name="StorageEndDate" required>
                        </div>
                    </div>
                </div>

                <!-- Customer Info (read-only from profile) -->
                <div class="customer-info-section">
                    <div class="section-title">Thông tin khách hàng</div>
                    <div class="customer-info-display">
                        <div class="customer-info-content" style="display:block;">
                            <div class="customer-name">@((string)ViewBag.CustomerFullName ?? "")</div>
                            <div class="customer-phone">📞 @((string)ViewBag.CustomerPhone ?? "")</div>
                            <div class="customer-email">📧 @((string)ViewBag.CustomerEmail ?? "")</div>
                        </div>
                    </div>
                </div>

                <!-- Pickup Address (from profile, default first) -->
                <div class="location-section">
                    <div class="section-title">Địa chỉ nhận hàng<span class="required">*</span></div>
                    <div class="address-input-wrapper">
                        <select id="pickupAddressSelect" class="address-autocomplete">
                            @foreach (var a in Model.AddressOptions.OrderByDescending(x => x.Id == Model.DropoffAddressId))
                            {
                                if (a.Id == Model.DropoffAddressId)
                                {
                                    <option value="@a.Id" selected="selected" data-lat="@a.Latitude" data-lng="@a.Longitude" data-full="@a.Full">@a.Label — @a.Full</option>
                                }
                                else
                                {
                                    <option value="@a.Id" data-lat="@a.Latitude" data-lng="@a.Longitude" data-full="@a.Full">@a.Label — @a.Full</option>
                                }
                            }
                        </select>
                    </div>               
                </div>

                <!-- Warehouse Area Search (with draggable marker) -->
                <div class="location-section">
                    <div class="section-title">Khu vực muốn tìm kho<span class="required">*</span></div>
                    <div class="address-input-wrapper">
                        <input type="text"
                               class="address-autocomplete"
                               id="warehouseAreaInput"
                               placeholder="Nhập khu vực (vd: Dương Quảng Hàm, Cầu Giấy...)"
                               autocomplete="off">
                        <div class="autocomplete-results" id="warehouseAreaResults"></div>
                    </div>            
                    <div style="font-size: 13px; color: #666; margin-top: 8px;">
                        💡 Bạn có thể kéo dấu 📍 trên bản đồ để chọn vị trí chính xác
                    </div>
                </div>

                <!-- Items List (pre-seeded with images) -->
                <div class="items-section">
                    <div class="section-title">Danh sách đồ dùng cần lưu kho</div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th style="width: 80px;">Ảnh</th>
                                <th>Tên đồ dùng</th>
                                <th>Loại</th>
                                <th style="width: 100px;">Số lượng</th>
                                <th style="width: 120px;">Trọng lượng (kg)</th>
                            </tr>
                        </thead>
                        <tbody id="itemsTableBody">
                            @for (int i = 0; i < Model.Items.Count; i++)
                            {
                                <tr>
                                    <td>
                                        <img src="@Model.Items[i].ImageUrl" alt="@Model.Items[i].Name" style="width: 60px; height: 60px; object-fit: cover; border-radius: 4px;">
                                    </td>
                                    <td>
                                        <input type="text" name="Items[@i].Name" value="@Model.Items[i].Name" readonly style="border: none; background: transparent; font-weight: 500;" />
                                    </td>
                                    <td>
                                        <input type="text" name="Items[@i].Category" value="@Model.Items[i].Category" readonly style="border: none; background: transparent;" />
                                    </td>
                                    <td>
                                        <input type="number" min="0" name="Items[@i].Quantity" value="@Model.Items[i].Quantity" style="width: 80px; text-align: center;" />
                                    </td>
                                    <td>
                                        <input type="number" step="0.1" min="0" name="Items[@i].EstimatedWeightKg" value="@Model.Items[i].EstimatedWeightKg" style="width: 100px; text-align: center;" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Special warehouse requirements -->
                <div class="goods-info-section">
                    <div class="section-title">Yêu cầu đặc biệt cho kho</div>
                    <div class="checkbox-group">
                        <label><input type="checkbox" name="SpecialRequirements" value="Kho mát" /> 🧊 Kho mát</label>
                        <label><input type="checkbox" name="SpecialRequirements" value="Chống ẩm" /> 💧 Chống ẩm</label>
                        <label><input type="checkbox" name="SpecialRequirements" value="An ninh cao" /> 🔒 An ninh cao</label>
                        <label><input type="checkbox" name="SpecialRequirements" value="Bảo hiểm hàng hóa" /> 🛡️ Bảo hiểm hàng hóa</label>
                        <label><input type="checkbox" name="SpecialRequirements" value="Kho có thang máy" /> 🏢 Kho có thang máy</label>
                        <label><input type="checkbox" name="SpecialRequirements" value="Giám sát 24/7" /> 📹 Giám sát 24/7</label>
                    </div>
                </div>

                <!-- Note Section -->
                <div class="note-section">
                    <div class="section-title">Ghi chú (tùy chọn)</div>
                    @Html.TextArea("Note", "", new
                        {
                            @class = "note-textarea",
                            @placeholder = "Nhập ghi chú về hàng hóa, yêu cầu đặc biệt, thời gian nhận hàng...",
                            @id = "orderNote"
                        })
                </div>
            }
        </div>

        <!-- Book Button -->
        <div class="book-section">
            <button type="button" class="book-btn" onclick="submitOrder()" id="bookBtn">
                📦 Yêu cầu báo giá từ các kho
            </button>
        </div>
    </div>

    <!-- Map Container (40%) -->
    <div class="map-container">
        <div id="map" style="width: 100%; height: 100%;"></div>
    </div>
</div>

<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

<!-- Custom JS -->
<script src="~/js/vcn-auth.js" asp-append-version="true"></script>
<script>
    // Map new element IDs to the expected ones in vcn-auth.js
    (function(){
        const i = document.getElementById('warehouseAreaInput');
        if (i) i.id = 'dropoffAddressInput';
        const r = document.getElementById('warehouseAreaResults');
        if (r) r.id = 'dropoffAutocompleteResults';
        const s = document.getElementById('selectedWarehouseArea');
        if (s) s.id = 'selectedDropoffAddress';
    })();

    // Lightweight autocomplete for warehouse area (Nominatim, Vietnam-biased)
    (function(){
        const input = document.getElementById('dropoffAddressInput');
        const results = document.getElementById('dropoffAutocompleteResults');
        if (!input || !results) return;
        let t;
        input.addEventListener('input', function(){
            const q = this.value.trim();
            clearTimeout(t);
            if (q.length < 2) { results.classList.remove('show'); results.innerHTML=''; return; }
            t = setTimeout(async () => {
                try {
                    let url = `https://nominatim.openstreetmap.org/search?format=json&addressdetails=1&countrycodes=vn&limit=5&accept-language=vi&q=${encodeURIComponent(q)}`;
                    if (window.map && map.getBounds) {
                        const b = map.getBounds();
                        const viewbox = `${b.getWest()},${b.getSouth()},${b.getEast()},${b.getNorth()}`;
                        url += `&viewbox=${encodeURIComponent(viewbox)}&bounded=0`;
                    }
                    const res = await fetch(url);
                    const data = await res.json();
                    results.innerHTML='';
                    if (!data.length) { results.classList.add('show'); results.innerHTML = '<div class="autocomplete-item">Không tìm thấy kết quả</div>'; return; }
                    data.forEach(it => {
                        const div = document.createElement('div');
                        div.className = 'autocomplete-item';
                        div.innerHTML = `<div class=\"autocomplete-item-main\">${it.name || (it.display_name||'').split(',')[0]}</div><div class=\"autocomplete-item-sub\">${it.display_name||''}</div>`;
                        div.addEventListener('click', () => {
                            const lat = parseFloat(it.lat), lng = parseFloat(it.lon);
                            if (typeof setDropoffLocation === 'function') setDropoffLocation(lat, lng, it.display_name);
                            const sel = document.getElementById('selectedDropoffAddress');
                            if (sel) { sel.textContent = it.display_name || ''; sel.classList.add('show'); }
                            input.value = it.display_name || '';
                            results.classList.remove('show');
                            results.innerHTML='';
        			});
                        results.appendChild(div);
                    });
                    results.classList.add('show');
                } catch(e) { /* ignore */ }
            }, 300);
        });
        document.addEventListener('click', (e) => {
            if (!results.contains(e.target) && e.target !== input) {
                results.classList.remove('show');
            }
        });
    })();
</script>