@{
    ViewData["Title"] = "Đặt dịch vụ kho";
}

<style>
    .delivery-page {
        display: flex;
        height: calc(100vh - 120px);
        position: relative;
        overflow: hidden;
    }

    /* Left Sidebar */
    .delivery-sidebar {
        width: 450px;
        background: white;
        box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        z-index: 10;
        position: relative;
    }

    /* Navigation Tabs */
    .nav-tabs {
        display: flex;
        background: white;
        border-bottom: 1px solid #e0e0e0;
        padding: 0 20px;
    }

    .nav-tab {
        padding: 15px 20px;
        cursor: pointer;
        border-bottom: 3px solid transparent;
        font-weight: 500;
        color: #666;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .nav-tab.active {
        color: #f26722;
        border-bottom-color: #f26722;
    }

    .nav-tab:hover {
        color: #f26722;
        text-decoration: none;
    }

    /* Delivery Form */
    .delivery-form {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
    }

    /* Address Input Method Selection */
    .address-input-method {
        margin-bottom: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .method-label {
        font-size: 13px;
        color: #666;
        margin-bottom: 8px;
        font-weight: 600;
    }

    .method-buttons {
        display: flex;
        gap: 10px;
    }

    .method-btn {
        flex: 1;
        padding: 10px;
        background: white;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        cursor: pointer;
        font-size: 13px;
        font-weight: 500;
        color: #333;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px;
    }

    .method-btn:hover {
        border-color: #f26722;
        color: #f26722;
    }

    .location-section {
        margin-bottom: 25px;
    }

    .section-title {
        font-size: 14px;
        color: #666;
        margin-bottom: 10px;
        text-transform: uppercase;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .location-input-group {
        position: relative;
        margin-bottom: 15px;
    }

    .location-icon {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        width: 12px;
        height: 12px;
        border-radius: 50%;
        z-index: 2;
    }

    .pickup-icon {
        background: #f26722;
    }

    .dropoff-icon {
        background: #4CAF50;
    }

    .location-display {
        width: 100%;
        padding: 15px 15px 15px 40px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        font-size: 14px;
        background: white;
        min-height: 50px;
    }

    .location-display.empty {
        color: #999;
        font-style: italic;
    }

    .location-display.filled {
        color: #333;
    }

    .instruction-text {
        font-size: 12px;
        color: #666;
        margin-top: 5px;
        padding-left: 40px;
    }

    /* Date Selection */
    .date-section {
        margin: 25px 0;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .date-row {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

    .date-row:last-child {
        margin-bottom: 0;
    }

    .date-group {
        flex: 1;
    }

    .date-label {
        display: block;
        font-size: 13px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
    }

    .date-label .required {
        color: #ff6b6b;
        margin-left: 3px;
    }

    .date-input {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        font-size: 14px;
        outline: none;
        transition: border-color 0.3s ease;
        background: white;
    }

    .date-input:focus {
        border-color: #f26722;
        box-shadow: 0 0 0 2px rgba(242, 103, 34, 0.1);
    }

    /* Vehicle Selection */
    .vehicle-section {
        margin: 25px 0;
    }

    .vehicle-options {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-bottom: 15px;
    }

    .vehicle-option {
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        background: white;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .vehicle-option.active {
        border-color: #f26722;
        background: #fff8f5;
    }

    .vehicle-option:hover {
        border-color: #f26722;
    }

    .vehicle-icon-wrapper {
        font-size: 24px;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .vehicle-option.active .vehicle-icon-wrapper {
        background: #ffe8da;
    }

    .vehicle-info {
        flex: 1;
    }

    .vehicle-name {
        font-size: 13px;
        font-weight: 600;
        color: #333;
        margin-bottom: 3px;
    }

    .vehicle-capacity {
        font-size: 11px;
        color: #666;
    }

    /* Order Details */
    .order-details {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin: 20px 0;
    }

    .detail-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        font-size: 13px;
    }

    .detail-label {
        color: #666;
        font-weight: 500;
    }

    .detail-value {
        color: #333;
        font-weight: 600;
    }

    .detail-value.highlight {
        color: #f26722;
        font-size: 14px;
    }

    /* Note Section */
    .note-section {
        margin: 20px 0;
    }

    .note-textarea {
        width: 100%;
        padding: 12px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        font-size: 13px;
        resize: vertical;
        min-height: 70px;
        outline: none;
        transition: border-color 0.3s ease;
    }

    .note-textarea:focus {
        border-color: #f26722;
        box-shadow: 0 0 0 2px rgba(242, 103, 34, 0.1);
    }

    /* Book Section */
    .book-section {
        padding: 20px;
        border-top: 1px solid #e0e0e0;
        background: white;
    }

    .book-btn {
        width: 100%;
        background: #f26722;
        color: white;
        border: none;
        padding: 15px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .book-btn:hover {
        background: #e55a1b;
    }

    .book-btn:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    /* Map Container */
    .map-container {
        flex: 1;
        position: relative;
    }

    /* Custom Marker Styles */
    .custom-marker {
        background: transparent !important;
        border: none !important;
    }

    /* Map Instructions */
    .map-instructions {
        position: absolute;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        z-index: 500;
        font-size: 14px;
        color: #333;
        display: block;
        text-align: center;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .delivery-page {
            flex-direction: column;
            height: auto;
        }

        .delivery-sidebar {
            width: 100%;
            height: auto;
        }

        .map-container {
            height: 400px;
            order: -1;
        }

        .vehicle-options {
            grid-template-columns: 1fr;
        }

        .date-row {
            flex-direction: column;
        }
    }
</style>

<div class="delivery-page">
    <!-- Left Sidebar -->
    <div class="delivery-sidebar">
        <!-- Navigation Tabs -->
        <div class="nav-tabs">
            <a href="#" class="nav-tab active">Dịch vụ kho</a>
            <a href="@Url.Action("Orders", "Delivery")" class="nav-tab">Đơn hàng</a>
            <a href="@Url.Action("Wallet", "Account")" class="nav-tab">Thanh toán</a>
        </div>

        <!-- Delivery Form -->
        <div class="delivery-form">
            @using (Html.BeginForm("BookDelivery", "Delivery", FormMethod.Post, new { id = "deliveryForm" }))
            {
                @Html.AntiForgeryToken()

                <!-- Address Input Method -->
                <div class="address-input-method">
                    <div class="method-label">Tải mẫu nhập địa chỉ</div>
                    <div class="method-buttons">
                        <button type="button" class="method-btn" onclick="downloadTemplate()">
                            📥 Tải về mẫu CSV
                        </button>
                    </div>
                </div>

                <div class="location-section">
                    <div class="section-title">Địa chỉ lấy hàng</div>

                    <div class="location-input-group">
                        <div class="location-icon pickup-icon"></div>
                        <div class="location-display empty" id="pickupDisplay">
                            Chưa chọn vị trí
                        </div>
                        <div class="instruction-text">
                            💡 Kéo marker 🔴 đỏ trên bản đồ để chọn địa chỉ lấy hàng
                        </div>
                        @Html.Hidden("PickupAddressData", "", new { @id = "pickupAddressData" })
                    </div>

                    <div class="section-title" style="margin-top: 20px;">Khu vực tìm kho</div>
                    
                    <div class="location-input-group">
                        <div class="location-icon dropoff-icon"></div>
                        <div class="location-display empty" id="dropoffDisplay">
                            Chưa chọn vị trí
                        </div>
                        <div class="instruction-text">
                            💡 Kéo marker 🟢 xanh trên bản đồ để chọn khu vực tìm kho
                        </div>
                        @Html.Hidden("DropoffAddressData", "", new { @id = "dropoffAddressData" })
                    </div>
                </div>

                <!-- Date Selection -->
                <div class="date-section">
                    <div class="section-title" style="margin-bottom: 15px;">Thời gian</div>
                    <div class="date-row">
                        <div class="date-group">
                            <label class="date-label">Ngày vận chuyển<span class="required">*</span></label>
                            <input type="date" class="date-input" id="deliveryDate" name="DeliveryDate" required>
                        </div>
                        <div class="date-group">
                            <label class="date-label">Ngày lấy đồ<span class="required">*</span></label>
                            <input type="date" class="date-input" id="pickupDate" name="PickupDate" required>
                        </div>
                    </div>
                </div>

                <!-- Order Details -->
                <div class="order-details" id="orderDetails" style="display: none;">
                    <div class="detail-row">
                        <span class="detail-label">📍 Khoảng cách</span>
                        <span class="detail-value" id="distanceDisplay">-- km</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">⏱️ Thời gian dự kiến</span>
                        <span class="detail-value" id="durationDisplay">-- phút</span>
                    </div>
                </div>

                @Html.Hidden("DistanceKm", "", new { @id = "distanceKm" })
                @Html.Hidden("EtaMinutes", "", new { @id = "etaMinutes" })

                <!-- Vehicle Selection -->
                <div class="vehicle-section">
                    <div class="section-title">Chọn phương tiện vận chuyển</div>
                    <div class="vehicle-options">
                        <div class="vehicle-option active" data-vehicle="motorbike" onclick="selectVehicle(this, 'motorbike')">
                            <div class="vehicle-icon-wrapper">🏍️</div>
                            <div class="vehicle-info">
                                <div class="vehicle-name">Xe Máy</div>
                                <div class="vehicle-capacity">0.4×0.4×0.4m, 30kg</div>
                            </div>
                        </div>
                        <div class="vehicle-option" data-vehicle="van500" onclick="selectVehicle(this, 'van500')">
                            <div class="vehicle-icon-wrapper">🚐</div>
                            <div class="vehicle-info">
                                <div class="vehicle-name">Xe Van 500kg</div>
                                <div class="vehicle-capacity">1.6×1.2×1.2m</div>
                            </div>
                        </div>
                        <div class="vehicle-option" data-vehicle="van750" onclick="selectVehicle(this, 'van750')">
                            <div class="vehicle-icon-wrapper">🚐</div>
                            <div class="vehicle-info">
                                <div class="vehicle-name">Xe Van 750kg</div>
                                <div class="vehicle-capacity">2.0×1.4×1.4m</div>
                            </div>
                        </div>
                        <div class="vehicle-option" data-vehicle="van1000" onclick="selectVehicle(this, 'van1000')">
                            <div class="vehicle-icon-wrapper">🚚</div>
                            <div class="vehicle-info">
                                <div class="vehicle-name">Xe Van 1000kg</div>
                                <div class="vehicle-capacity">2.2×1.6×1.6m</div>
                            </div>
                        </div>
                        <div class="vehicle-option" data-vehicle="pickup" onclick="selectVehicle(this, 'pickup')">
                            <div class="vehicle-icon-wrapper">🛻</div>
                            <div class="vehicle-info">
                                <div class="vehicle-name">Xe Bán Tải</div>
                                <div class="vehicle-capacity">1.5×1.5×0.5m, 800kg</div>
                            </div>
                        </div>
                        <div class="vehicle-option" data-vehicle="truck1500" onclick="selectVehicle(this, 'truck1500')">
                            <div class="vehicle-icon-wrapper">🚛</div>
                            <div class="vehicle-info">
                                <div class="vehicle-name">Xe Tải 1.5 Tấn</div>
                                <div class="vehicle-capacity">3.0×1.6×1.6m</div>
                            </div>
                        </div>
                        <div class="vehicle-option" data-vehicle="truck2500" onclick="selectVehicle(this, 'truck2500')">
                            <div class="vehicle-icon-wrapper">🚛</div>
                            <div class="vehicle-info">
                                <div class="vehicle-name">Xe Tải 2.5 Tấn</div>
                                <div class="vehicle-capacity">4.0×1.8×1.8m</div>
                            </div>
                        </div>
                        <div class="vehicle-option" data-vehicle="truck3500" onclick="selectVehicle(this, 'truck3500')">
                            <div class="vehicle-icon-wrapper">🚛</div>
                            <div class="vehicle-info">
                                <div class="vehicle-name">Xe Tải 3.5 Tấn</div>
                                <div class="vehicle-capacity">5.0×2.0×2.0m</div>
                            </div>
                        </div>
                    </div>
                    @Html.Hidden("SelectedVehicle", "motorbike", new { @id = "selectedVehicle" })
                </div>

                <!-- Note Section -->
                <div class="note-section">
                    <div class="section-title">Ghi chú (tùy chọn)</div>
                    @Html.TextArea("Note", "", new { 
                        @class = "note-textarea", 
                        @placeholder = "Nhập ghi chú về hàng hóa, yêu cầu đặc biệt...",
                        @id = "orderNote"
                    })
                </div>
            }
        </div>

        <div class="book-section">
            <button type="button" class="book-btn" onclick="submitOrder()" id="bookBtn">
                Yêu cầu báo giá từ các kho
            </button>
        </div>
    </div>

    <!-- Map Container -->
    <div class="map-container">
        <div class="map-instructions" id="mapInstructions">
            🔴 Marker đỏ: Địa chỉ lấy hàng | 🟢 Marker xanh: Khu vực tìm kho<br>
            <small>Kéo các marker để chọn vị trí</small>
        </div>
        <div id="map" style="width: 100%; height: 100%;"></div>
    </div>
</div>

<!-- Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

<script>
    let map, pickupMarker, dropoffMarker, routeLine;
    let pickupData = null;
    let dropoffData = null;

    document.addEventListener('DOMContentLoaded', function() {
        initMap();
        initDateInputs();
    });

    function initMap() {
        // Khởi tạo bản đồ tại Hà Nội
        map = L.map('map').setView([21.028511, 105.804817], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        // Thêm search control
        L.Control.geocoder({
            defaultMarkGeocode: false,
            placeholder: 'Tìm kiếm địa điểm...',
            errorMessage: 'Không tìm thấy'
        }).on('markgeocode', function(e) {
            const latlng = e.geocode.center;
            map.panTo(latlng);
        }).addTo(map);

        // Tạo marker đỏ (pickup) - có thể kéo
        pickupMarker = L.marker([21.028511, 105.804817], { 
            draggable: true,
            icon: L.divIcon({
                className: 'custom-marker',
                html: '<div style="background:#f26722;width:28px;height:28px;border-radius:50%;border:4px solid white;box-shadow:0 2px 10px rgba(242,103,34,0.5)"></div>',
                iconSize: [28, 28],
                iconAnchor: [14, 14]
            })
        }).addTo(map).bindPopup('🔴 Địa chỉ lấy hàng<br><small>Kéo để di chuyển</small>');

        // Tạo marker xanh (dropoff) - có thể kéo
        dropoffMarker = L.marker([21.038511, 105.814817], { 
            draggable: true,
            icon: L.divIcon({
                className: 'custom-marker',
                html: '<div style="background:#4CAF50;width:32px;height:32px;border-radius:50%;border:4px solid white;box-shadow:0 3px 12px rgba(76,175,80,0.5)"></div>',
                iconSize: [32, 32],
                iconAnchor: [16, 16]
            })
        }).addTo(map).bindPopup('🟢 Khu vực tìm kho<br><small>Kéo để di chuyển</small>');

        // Load địa chỉ ban đầu
        updateAddressFromMarker(pickupMarker, 'pickup');
        updateAddressFromMarker(dropoffMarker, 'dropoff');

        // Xử lý sự kiện kéo marker
        pickupMarker.on('drag', updateRouteAndDistance);
        pickupMarker.on('dragend', function() {
            updateAddressFromMarker(pickupMarker, 'pickup');
        });

        dropoffMarker.on('drag', updateRouteAndDistance);
        dropoffMarker.on('dragend', function() {
            updateAddressFromMarker(dropoffMarker, 'dropoff');
        });

        // Vẽ đường đi ban đầu
        updateRouteAndDistance();
    }

    function initDateInputs() {
        // Set ngày tối thiểu là hôm nay
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('deliveryDate').min = today;
        document.getElementById('pickupDate').min = today;

        // Set giá trị mặc định
        document.getElementById('deliveryDate').value = today;
        
        // Ngày lấy đồ mặc định là 3 ngày sau ngày vận chuyển
        const deliveryDateInput = document.getElementById('deliveryDate');
        const pickupDateInput = document.getElementById('pickupDate');

        deliveryDateInput.addEventListener('change', function() {
            const deliveryDate = new Date(this.value);
            deliveryDate.setDate(deliveryDate.getDate() + 3);
            pickupDateInput.value = deliveryDate.toISOString().split('T')[0];
            pickupDateInput.min = this.value;
        });

        // Trigger để set giá trị ban đầu
        const defaultPickupDate = new Date();
        defaultPickupDate.setDate(defaultPickupDate.getDate() + 3);
        pickupDateInput.value = defaultPickupDate.toISOString().split('T')[0];
    }

    async function updateAddressFromMarker(marker, type) {
        const pos = marker.getLatLng();
        
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${pos.lat}&lon=${pos.lng}&accept-language=vi`);
            const data = await response.json();
            
            const addressData = {
                street: data.display_name || 'Vị trí đã chọn',
                lat: pos.lat,
                lng: pos.lng
            };

            if (type === 'pickup') {
                pickupData = addressData;
                document.getElementById('pickupDisplay').innerHTML = addressData.street;
                document.getElementById('pickupDisplay').classList.remove('empty');
                document.getElementById('pickupDisplay').classList.add('filled');
                document.getElementById('pickupAddressData').value = JSON.stringify(addressData);
                marker.setPopupContent('🔴 Địa chỉ lấy hàng<br>' + addressData.street);
            } else {
                dropoffData = addressData;
                document.getElementById('dropoffDisplay').innerHTML = addressData.street;
                document.getElementById('dropoffDisplay').classList.remove('empty');
                document.getElementById('dropoffDisplay').classList.add('filled');
                document.getElementById('dropoffAddressData').value = JSON.stringify(addressData);
                marker.setPopupContent('🟢 Khu vực tìm kho<br>' + addressData.street);
            }

            updateRouteAndDistance();
        } catch (error) {
            console.error('Error reverse geocoding:', error);
            const addressData = {
                street: `Vị trí: ${pos.lat.toFixed(6)}, ${pos.lng.toFixed(6)}`,
                lat: pos.lat,
                lng: pos.lng
            };

            if (type === 'pickup') {
                pickupData = addressData;
                document.getElementById('pickupDisplay').innerHTML = addressData.street;
                document.getElementById('pickupDisplay').classList.remove('empty');
                document.getElementById('pickupDisplay').classList.add('filled');
                document.getElementById('pickupAddressData').value = JSON.stringify(addressData);
            } else {
                dropoffData = addressData;
                document.getElementById('dropoffDisplay').innerHTML = addressData.street;
                document.getElementById('dropoffDisplay').classList.remove('empty');
                document.getElementById('dropoffDisplay').classList.add('filled');
                document.getElementById('dropoffAddressData').value = JSON.stringify(addressData);
            }
        }
    }

    function updateRouteAndDistance() {
        if (pickupMarker && dropoffMarker) {
            const pickupPos = pickupMarker.getLatLng();
            const dropoffPos = dropoffMarker.getLatLng();
            
            // Vẽ đường đi
            if (routeLine) {
                map.removeLayer(routeLine);
            }
            routeLine = L.polyline([pickupPos, dropoffPos], { 
                color: '#f26722',
                weight: 4,
                opacity: 0.7,
                dashArray: '10, 10'
            }).addTo(map);
            
            // Tính khoảng cách
            const distance = pickupPos.distanceTo(dropoffPos) / 1000; // km
            const distanceKm = distance.toFixed(1);
            
            // Ước tính thời gian (30 km/h trung bình)
            const durationMinutes = Math.round((distance / 30) * 60);
            
            // Cập nhật UI
            document.getElementById('distanceDisplay').textContent = distanceKm + ' km';
            document.getElementById('durationDisplay').textContent = durationMinutes + ' phút';
            document.getElementById('distanceKm').value = distanceKm;
            document.getElementById('etaMinutes').value = durationMinutes;
            document.getElementById('orderDetails').style.display = 'block';
        }
    }

    function downloadTemplate() {
        const csvContent = `"Địa chỉ","2. Họ tên","3. Số điện thoại","4. Tầng/tòa nhà"
"số nhà và tên đường 
HOẶC tên tòa nhà","tên người nhận tại điểm dừng này 
 
Vd: John Doe","số điện thoại của người nhận tại điểm dừng 
 
Ví dụ: 0912345678","nhập tên tòa nhà, số tầng, số phòng hoặc bổ sung thông tin điểm dừng 
 
Ví dụ: Tầng 13, phòng 21"
"Nhập tại đây...","Nhập tại đây...","Nhập tại đây...","Nhập tại đây..."`;

        const blob = new Blob(["\ufeff" + csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = 'mau_nhap_dia_chi.csv';
        link.click();
    }

    function selectVehicle(element, vehicleType) {
        document.querySelectorAll('.vehicle-option').forEach(opt => opt.classList.remove('active'));
        element.classList.add('active');
        document.getElementById('selectedVehicle').value = vehicleType;
    }

    async function submitOrder() {
        // Validate
        if (!pickupData || !dropoffData) {
            alert('⚠️ Vui lòng chọn vị trí trên bản đồ!\n\nKéo các marker 🔴 và 🟢 để chọn vị trí.');
            return;
        }

        const deliveryDate = document.getElementById('deliveryDate').value;
        const pickupDate = document.getElementById('pickupDate').value;

        if (!deliveryDate || !pickupDate) {
            alert('⚠️ Vui lòng chọn ngày vận chuyển và ngày lấy đồ!');
            return;
        }

        // Kiểm tra ngày lấy đồ phải sau ngày vận chuyển
        if (new Date(pickupDate) < new Date(deliveryDate)) {
            alert('⚠️ Ngày lấy đồ phải sau hoặc bằng ngày vận chuyển!');
            return;
        }

        const distanceKm = document.getElementById('distanceKm').value;
        const etaMinutes = document.getElementById('etaMinutes').value;
        
        if (!distanceKm || !etaMinutes) {
            alert('⚠️ Không thể tính toán khoảng cách. Vui lòng thử lại!');
            return;
        }

        // Chuẩn bị dữ liệu
        const orderData = {
            pickupAddress: {
                stored: false,
                addressLine: pickupData.street,
                label: 'Điểm lấy hàng',
                ward: '',
                district: '',
                city: 'Hà Nội',
                latitude: pickupData.lat,
                longitude: pickupData.lng,
                recipientName: '',
                recipientPhone: '',
                floor: ''
            },
            dropoffAddress: {
                stored: false,
                addressLine: dropoffData.street,
                label: 'Khu vực tìm kho',
                ward: '',
                district: '',
                city: 'Hà Nội',
                latitude: dropoffData.lat,
                longitude: dropoffData.lng,
                recipientName: '',
                recipientPhone: '',
                floor: ''
            },
            distanceKm: parseFloat(distanceKm),
            etaMinutes: parseInt(etaMinutes),
            deliveryDate: deliveryDate,
            pickupDate: pickupDate,
            note: document.getElementById('orderNote').value || '',
            vehicleType: document.getElementById('selectedVehicle').value
        };

        // Hiển thị loading
        const bookBtn = document.getElementById('bookBtn');
        const originalText = bookBtn.textContent;
        bookBtn.textContent = '⏳ Đang gửi yêu cầu...';
        bookBtn.disabled = true;

        try {
            const response = await fetch('@Url.Action("CreateWarehouseOrder", "Delivery")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(orderData)
            });

            const result = await response.json();

            if (response.ok && result.success) {
                alert(`✅ ${result.message}\n\n📦 Mã đơn hàng: #${result.orderId}\n🏪 Số kho được thông báo: ${result.nearbyStoresCount}\n📅 Ngày vận chuyển: ${deliveryDate}\n📅 Ngày lấy đồ: ${pickupDate}\n\nBạn sẽ nhận được báo giá từ các kho trong thời gian sớm nhất.`);
                
                // Chuyển đến trang đơn hàng
                window.location.href = '@Url.Action("Orders", "Delivery")';
            } else {
                alert('❌ ' + (result.message || 'Có lỗi xảy ra. Vui lòng thử lại!'));
                bookBtn.textContent = originalText;
                bookBtn.disabled = false;
            }
        } catch (error) {
            console.error('Error:', error);
            alert('❌ Không thể kết nối đến máy chủ. Vui lòng kiểm tra kết nối và thử lại!');
            bookBtn.textContent = originalText;
            bookBtn.disabled = false;
        }
    }
</script>