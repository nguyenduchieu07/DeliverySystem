@using PresentationLayer.Models
@model StoreOrderIndexViewModel
@{
    ViewData["Title"] = "Danh sách đơn hàng";
}

<style>
    :root {
        --success: #1cc88a;
        --warning: #f6c23e;
        --danger: #e74a3b;
        --info: #36b9cc;
        --primary: #4e73df;
        --text: #5a5c69;
        --border: #e3e6f0;
        --white: #ffffff;
        --shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
    }

    /* Page Header */
    .page-header {
        margin-bottom: 1.5rem;
    }

    .page-header h1 {
        font-size: 1.75rem;
        font-weight: 400;
        color: var(--text);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .page-header h1 i {
        color: var(#e5501b);
    }

    /* Stats Cards */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 1.25rem;
        margin-bottom: 1.5rem;
    }

    .stat-card {
        background: var(--white);
        border-left: 4px solid var(#e5501b);
        padding: 1rem;
        border-radius: 0.35rem;
        box-shadow: var(--shadow);
        transition: all 0.15s ease-in-out;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 0.5rem 2rem 0 rgba(58, 59, 69, 0.2);
    }

    .stat-label {
        font-size: 0.7rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: var(#e5501b);
        margin-bottom: 0.25rem;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text);
    }

    /* Card Styles */
    .card {
        background: var(--white);
        border: 1px solid var(--border);
        border-radius: 0.35rem;
        box-shadow: var(--shadow);
        margin-bottom: 1.25rem;
    }

    .card-header {
        background: linear-gradient(180deg, var(#e5501b) 0%, var(#d26c45) 100%);
        padding: 0.75rem 1.25rem;
        border-bottom: none;
        border-radius: 0.35rem 0.35rem 0 0;
        font-size: 1rem;
        font-weight: 700;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .card-header h5 {
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1rem;
        font-weight: 700;
    }

    .card-body {
        padding: 1.25rem;
    }

    /* DataTable Custom Styling */
    .dataTables_wrapper {
        font-family: 'Nunito', -apple-system, sans-serif;
    }

    .dataTables_wrapper .dataTables_length,
    .dataTables_wrapper .dataTables_filter {
        margin-bottom: 1rem;
    }

    .dataTables_wrapper .dataTables_length select {
        padding: 0.375rem 0.75rem;
        border: 1px solid var(--border);
        border-radius: 0.35rem;
        margin: 0 0.5rem;
        transition: all 0.15s ease-in-out;
    }

    .dataTables_wrapper .dataTables_length select:focus {
        outline: none;
        border-color: var(#e5501b);
        box-shadow: 0 0 0 0.2rem rgba(229, 80, 27, 0.25);
    }

    .dataTables_wrapper .dataTables_filter input {
        padding: 0.375rem 0.75rem;
        border: 1px solid var(--border);
        border-radius: 0.35rem;
        margin-left: 0.5rem;
        transition: all 0.15s ease-in-out;
    }

    .dataTables_wrapper .dataTables_filter input:focus {
        outline: none;
        border-color: var(#e5501b);
        box-shadow: 0 0 0 0.2rem rgba(229, 80, 27, 0.25);
    }

    /* Table Styles */
    #storeOrderTable {
        width: 100% !important;
        border-collapse: collapse;
    }

    #storeOrderTable thead {
        background: var(#f8f9fc);
    }

    #storeOrderTable thead th {
        padding: 1rem 1.25rem;
        text-align: left;
        font-size: 0.7rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: var(--text);
        border-bottom: 2px solid var(--border);
    }

    #storeOrderTable tbody td {
        padding: 1rem 1.25rem;
        border-bottom: 1px solid var(--border);
        color: var(--text);
        font-size: 0.875rem;
        vertical-align: middle;
    }

    #storeOrderTable tbody tr {
        transition: background-color 0.15s ease-in-out;
    }

    #storeOrderTable tbody tr:hover {
        background: var(#f8f9fc);
    }

    /* Order ID */
    .order-id {
        font-weight: 700;
        color: var(#e5501b);
        font-family: 'Courier New', monospace;
    }

    /* Customer Name */
    .customer-name {
        font-weight: 600;
        color: var(--text);
    }

    /* Price Display */
    .price-display {
        font-weight: 700;
        color: var(--success);
        font-size: 0.9rem;
    }

    /* Status Badges */
    .badge {
        display: inline-block;
        padding: 0.375rem 0.875rem;
        border-radius: 10rem;
        font-size: 0.7rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .badge.bg-warning {
        background: var(--warning);
        color: var(--white);
    }

    .badge.bg-success {
        background: var(--success);
        color: var(--white);
    }

    .badge.bg-danger {
        background: var(--danger);
        color: var(--white);
    }

    .badge.bg-primary {
        background: var(--primary);
        color: var(--white);
    }

    .badge.bg-secondary {
        background: var(#858796);
        color: var(--white);
    }

    /* Action Buttons */
    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.375rem 0.75rem;
        border: none;
        border-radius: 0.35rem;
        font-size: 0.75rem;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.15s ease-in-out;
        white-space: nowrap;
    }

    .btn-outline-primary {
        background: var(--white);
        border: 1px solid var(#e5501b);
        color: var(#e5501b);
    }

    .btn-outline-primary:hover {
        background: var(#e5501b);
        color: var(--white);
        transform: translateY(-1px);
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    /* Date Display */
    .date-display {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        color: var(--text);
    }

    .date-display i {
        color: var(#858796);
        font-size: 0.75rem;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: var(#858796);
    }

    .empty-state i {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.3;
        color: var(#e5501b);
    }

    .empty-state p {
        font-size: 1rem;
        margin: 0;
    }

    /* DataTable Pagination */
    .dataTables_wrapper .dataTables_paginate .paginate_button {
        padding: 0.375rem 0.75rem;
        margin: 0 0.125rem;
        border: 1px solid var(--border);
        border-radius: 0.35rem;
        color: var(--text);
        transition: all 0.15s ease-in-out;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        background: var(#f8f9fc);
        border-color: var(#e5501b);
        color: var(#e5501b);
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
        background: var(#e5501b);
        border-color: var(#e5501b);
        color: var(--white);
    }

    .dataTables_wrapper .dataTables_info {
        padding-top: 1rem;
        color: var(#858796);
        font-size: 0.875rem;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .stats-grid {
            grid-template-columns: 1fr;
            grid-template-columns: 1fr;
        }

        #storeOrderTable thead th,
        #storeOrderTable tbody td {
            padding: 0.75rem;
            font-size: 0.75rem;
        }
    }
</style>

<div class="page-header">
    <h1><i class="fas fa-boxes"></i> Quản Lý Đơn Hàng</h1>
</div>

<!-- Statistics Cards -->
@if (Model.Orders != null && Model.Orders.Any())
{
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-label">Tổng Đơn Hàng</div>
            <div class="stat-value">@Model.TotalElements</div>
        </div>
        <div class="stat-card" style="border-left-color: var(--warning);">
            <div class="stat-label" style="color: var(--warning);">Tạm Lưu</div>
            <div class="stat-value">@Model.Orders.Count(o => o.Status == StatusValue.Draft)</div>
        </div>
        <div class="stat-card" style="border-left-color: var(--warning);">
            <div class="stat-label" style="color: var(--warning);">Chờ Xử Lý</div>
            <div class="stat-value">@Model.Orders.Count(o => o.Status == StatusValue.Pending)</div>
        </div>
        <div class="stat-card" style="border-left-color: var(--success);">
            <div class="stat-label" style="color: var(--success);">Đã Duyệt</div>
            <div class="stat-value">@Model.Orders.Count(o => o.Status == StatusValue.Approved)</div>
        </div>
        <div class="stat-card" style="border-left-color: var(--primary);">
            <div class="stat-label" style="color: var(--primary);">Hoàn Thành</div>
            <div class="stat-value">@Model.Orders.Count(o => o.Status == StatusValue.Completed)</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Đã Hủy</div>
            <div class="stat-value">@Model.Orders.Count(o => o.Status == StatusValue.Canceled)</div>
        </div>
    </div>
}

<!-- Main Table Card -->
<div class="card">
    <div class="card-header">
        <h5>
            <i class="fas fa-list"></i> Danh Sách Đơn Hàng
        </h5>
    </div>
    <div class="card-body">
        @if (Model.Orders != null && Model.Orders.Any())
        {
            <table id="storeOrderTable" class="display" style="width:100%">
                <thead>
                    <tr>
                        <th>Mã Đơn</th>
                        <th>Khách Hàng</th>
                        <th>Ngày Gửi</th>
                        <th>Ngày Giao DK</th>
                        <th>Tổng Tiền</th>
                        <th>Trạng Thái</th>
                        <th>Thao Tác</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model.Orders)
                    {
                        <tr>
                            <td>
                                <span class="order-id">#@(order.Id.ToString().Substring(0, 8))</span>
                            </td>
                            <td>
                                <span class="customer-name">@(order.Customer?.FullName ?? "N/A")</span>
                            </td>
                            <td>
                                <span class="date-display">
                                    <i class="far fa-calendar"></i>
                                    @(order.PickupDate?.ToString("dd/MM/yyyy") ?? "—")
                                </span>
                            </td>
                            <td>
                                <span class="date-display">
                                    <i class="far fa-calendar-check"></i>
                                    @(order.DeliveryDate?.ToString("dd/MM/yyyy") ?? "—")
                                </span>
                            </td>
                            <td>
                                <span class="price-display">@order.TotalAmount.ToString("N0") ₫</span>
                            </td>
                            <td>
                                @{
                                    var badge = order.Status switch
                                    {
                                        StatusValue.Draft => "bg-warning",
                                        StatusValue.Pending => "bg-warning",
                                        StatusValue.Approved => "bg-success",
                                        StatusValue.Rejected => "bg-danger",
                                        StatusValue.Completed => "bg-primary",
                                        _ => "bg-secondary"
                                    };
                                }
                                <span class="badge @badge">@order.Status.ToDisplayStringForOrder()</span>
                            </td>
                            <td>
                                <a asp-action="Detail" asp-route-id="@order.Id" class="btn btn-outline-primary">
                                    <i class="fas fa-eye"></i> Chi tiết
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-inbox"></i>
                <p>Chưa có đơn hàng nào</p>
            </div>
        }
    </div>
</div>


@section Scripts {
    <script>
        $(document).ready(function () {
            $('#storeOrderTable').DataTable({
                pageLength: 10,
                order: [[0, 'asc']],
                responsive: true,
                language: {
                    lengthMenu: "Hiển thị _MENU_ mục",
                    info: "Hiển thị _START_ đến _END_ trong tổng _TOTAL_ mục",
                    infoEmpty: "Hiển thị 0 đến 0 trong tổng 0 mục",
                    infoFiltered: "(lọc từ _MAX_ mục)",
                    emptyTable: "Không có dữ liệu",
                    search: "🔍",
                    paginate: {
                        first: '<i class="fas fa-angle-double-left"></i>',
                        previous: '<i class="fas fa-angle-left"></i>',
                        next: '<i class="fas fa-angle-right"></i>',
                        last: '<i class="fas fa-angle-double-right"></i>'
                    },
                    zeroRecords: "Không tìm thấy kết quả phù hợp"
                },
                columnDefs: [
                    {orderable: false, targets: [4]}
                ],
                initComplete: function () {
                    this.api().columns([5]).every(function () { // 5 = cột Trạng thái
                        var column = this;
                        var select = $('<select class="form-select form-select-sm" style="width:150px;">' +
                            '<option value="">Tất cả</option>' +
                            '<option value="@(StatusValue.Draft.ToDisplayStringForOrder())">Tạm lưu</option>' +
                            '<option value="@(StatusValue.Pending.ToDisplayStringForOrder())">Chờ xử lý</option>' +
                            '<option value="@(StatusValue.Approved.ToDisplayStringForOrder())">Đã duyệt</option>' +
                            '<option value="@(StatusValue.Completed.ToDisplayStringForOrder())">Hoàn thành</option>' +
                            '<option value="@(StatusValue.Canceled.ToDisplayStringForOrder())">Đã hủy</option>' +
                            '</select>')
                            .appendTo($(column.header()).empty())
                            .on('change', function () {
                                var val = $.fn.dataTable.util.escapeRegex($(this).val());
                                column.search(val ? '^' + val + '$' : '', true, false).draw();
                            });
                    });
                }
            });
        });
    </script>
}
