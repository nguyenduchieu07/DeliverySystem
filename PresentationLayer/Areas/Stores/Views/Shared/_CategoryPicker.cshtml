@using PresentationLayer.Areas.Stores.Models
@model ServiceEditVM
<div class="row" data-cat-picker>
  <div data-parent-wrap style="position:relative">
    <label>@Html.DisplayNameFor(m => m.ParentCategoryId)</label>
    <select data-parent class="" name="ParentCategoryId"></select>
    <div class="help">Chọn nhóm lớn trước</div>
  </div>
  <div data-child-wrap class="hidden" style="position:relative">
    <label>@Html.DisplayNameFor(m => m.CategoryId)</label>
    <select data-child class="" name="CategoryId"></select>
    <div class="help">Danh mục con sẽ hiện sau khi chọn danh mục cha</div>
    @Html.ValidationMessageFor(m => m.CategoryId, "", new { @class = "text-danger" })
  </div>
  <div style="align-self:end">
    <div data-crumb class="muted"></div>
  </div>
</div>
@section Scripts {
<script>
  (function(){
    const root = document.currentScript.closest('[data-cat-picker]') || document.querySelector('[data-cat-picker]');
    if(!root) return;
    const parentWrap = root.querySelector('[data-parent-wrap]');
    const childWrap  = root.querySelector('[data-child-wrap]');
    const parentSel  = root.querySelector('[data-parent]');
    const childSel   = root.querySelector('[data-child]');
    const crumb      = root.querySelector('[data-crumb]');

    function setOptions(select, items, placeholder){
      select.innerHTML = '';
      const def = document.createElement('option'); def.value=''; def.textContent = placeholder || '— Chọn —'; select.appendChild(def);
      for(const it of items){ const o = document.createElement('option'); o.value = it.id; o.textContent = it.name; select.appendChild(o); }
    }

    async function loadParents(selected){
      parentSel.classList.add('hidden');
      const sk = document.createElement('div'); sk.className='skeleton'; parentWrap.appendChild(sk);
      const res = await fetch('@Url.Content("~/categories/parents")');
      const data = await res.json();
      parentWrap.removeChild(sk); parentSel.classList.remove('hidden');
      setOptions(parentSel, data, '— Chọn danh mục cha —');
      if(selected){ parentSel.value = selected; if(!parentSel.value) parentSel.selectedIndex = 0; }
      parentSel.dispatchEvent(new Event('change'));
    }

    async function loadChildren(parentId, selected){
      childWrap.classList.remove('hidden'); childSel.classList.add('hidden');
      const sk2 = document.createElement('div'); sk2.className='skeleton'; childWrap.appendChild(sk2);
      const res = await fetch('@Url.Content("~/categories/children")' + '?parentId=' + parentId);
      const data = await res.json();
      childWrap.removeChild(sk2); childSel.classList.remove('hidden');
      setOptions(childSel, data, '— Chọn danh mục con —');
      if(selected){ childSel.value = selected; if(!childSel.value) childSel.selectedIndex = 0; }
    }

    parentSel.addEventListener('change', async function(){
      const pid = parentSel.value; const ptext = parentSel.options[parentSel.selectedIndex]?.textContent || '';
      crumb.innerHTML = '';
      if(!pid){ childWrap.classList.add('hidden'); setOptions(childSel, [], '— Chọn danh mục con —'); return; }
      crumb.appendChild(pill(ptext)); crumb.appendChild(document.createTextNode(' / '));
      await loadChildren(pid, '@Model.CategoryId');
    });

    childSel.addEventListener('change', function(){
      const ptext = parentSel.options[parentSel.selectedIndex]?.textContent || '';
      const ctext = childSel.options[childSel.selectedIndex]?.textContent || '';
      crumb.innerHTML = '';
      if(ptext) crumb.appendChild(pill(ptext));
      if(ctext){ crumb.appendChild(document.createTextNode(' / ')); crumb.appendChild(pill(ctext)); }
    });

    function pill(text){ const el = document.createElement('span'); el.className='pill'; el.textContent = text; return el; }

    // Initial load with possible preselected values from Model
    loadParents('@Model.ParentCategoryId');
  })();
</script>
}
