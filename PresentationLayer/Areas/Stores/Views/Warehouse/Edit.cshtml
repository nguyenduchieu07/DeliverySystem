@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model DataAccessLayer.Entities.Warehouse
@{
    ViewBag.Title = "Chỉnh sửa kho";
    var addresses = ViewBag.Addresses as List<DataAccessLayer.Entities.Address>;
    var addr = Model.Address;
}

@section Styles {
    <link rel="stylesheet"
          href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          crossorigin="" />
    <link rel="stylesheet"
          href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <style>
        #map {
            height: 380px;
            border-radius: var(--radius);
            border: 1px solid var(--border);
            margin-top: 12px;
            margin-bottom: 20px;
        }

        .row-2 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 14px 20px;
        }

            .row-2 > div {
                display: flex;
                flex-direction: column;
            }

            .row-2 label {
                color: var(--muted);
                font-size: 12px;
                text-transform: uppercase;
                margin-bottom: 6px;
            }

            .row-2 input, .row-2 select {
                width: 100%;
                background: var(--panel-2);
                border: 1px solid var(--border);
                border-radius: 12px;
                color: var(--text);
                padding: 10px 12px;
                font-size: 14px;
            }

        form input[type="text"],
        form input[type="file"],
        form select {
            width: 100%;
            background: var(--panel-2);
            border: 1px solid var(--border);
            border-radius: 12px;
            color: var(--text);
            padding: 10px 12px;
            font-size: 14px;
            transition: border-color .15s ease, box-shadow .15s ease;
        }
    </style>
}

<h2 class="page-title">Chỉnh sửa kho</h2>

<form asp-action="Edit" method="post" enctype="multipart/form-data">
    <input type="hidden" asp-for="Id" />

    <div class="card">
        <label>Tên kho</label>
        <input asp-for="Name" placeholder="VD: Kho Hà Đông" />

        <label>Chọn địa chỉ có sẵn (tùy chọn)</label>
        <select asp-for="AddressRefId">
            <option value="">-- Không chọn (tự thêm) --</option>
            @foreach (var a in addresses)
            {
                <option value="@a.Id" selected="@(a.Id == Model.AddressRefId)">
                    @a.AddressLine (@a.City)
                </option>
            }
        </select>

        <hr />
        <h4>Hoặc cập nhật địa chỉ mới</h4>

        <div class="row-2">
            <div>
                <label>Địa chỉ chi tiết</label>
                <input name="newAddress.AddressLine" id="addressLine" value="@addr?.AddressLine" />
            </div>
            <div>
                <label>Tỉnh / Thành phố</label>
                <input name="newAddress.City" id="city" value="@addr?.City" readonly />
            </div>
            <div>
                <label>Quận / Huyện</label>
                <input name="newAddress.District" id="district" value="@addr?.District" readonly />
            </div>
            <div>
                <label>Phường / Xã</label>
                <input name="newAddress.Ward" id="ward" value="@addr?.Ward" readonly />
            </div>
            <div>
                <label>Latitude</label>
                <input name="newAddress.Latitude" id="lat" value="@addr?.Latitude" readonly />
            </div>
            <div>
                <label>Longitude</label>
                <input name="newAddress.Longitude" id="lng" value="@addr?.Longitude" readonly />
            </div>
        </div>

        <div id="map"></div>

        <div class="row-2">
            <div>
                <label>Ảnh bìa kho</label>
                <input type="file" name="CoverImage" accept="image/*" />
                @if (!string.IsNullOrEmpty(Model.CoverImageUrl))
                {
                    <img src="@Model.CoverImageUrl" style="width:100%;max-height:150px;margin-top:8px;border-radius:12px;" />
                }
            </div>
            <div>
                <label>Ảnh sơ đồ kho</label>
                <input type="file" name="MapImage" accept="image/*" />
                @if (!string.IsNullOrEmpty(Model.MapImageUrl))
                {
                    <img src="@Model.MapImageUrl" style="width:100%;max-height:150px;margin-top:8px;border-radius:12px;" />
                }
            </div>
        </div>

        <hr class="muted" />
        <h4>Kích thước kho (m)</h4>
        <div class="row-2">
            <div><label>Cao (m)</label>  <input type="number" asp-for="HeightM" min="0" step="0.01" /></div>
            <div><label>Dài (m)</label>  <input type="number" asp-for="LengthM" min="0" step="0.01" /></div>
            <div><label>Rộng (m)</label> <input type="number" asp-for="WidthM" min="0" step="0.01" /></div>
            <div style="align-self:end;"><div class="muted">Vol: @(Math.Round(Model.HeightM * Model.LengthM * Model.WidthM, 3)) m³</div></div>
        </div>
    </div>
    <!-- Import Excel -->
    <div class="card">
        <div style="display:flex;align-items:center;justify-content:space-between;gap:12px;flex-wrap:wrap;">
            <div>
                <h4 style="margin:0;">Import Slots (.xlsx)</h4>
                <div class="muted" style="font-size:12px;">Header: WarehouseName, Code, Row, Col, HeightM, LengthM, WidthM, BasePricePerHour, LeaseStart, LeaseEnd, IsBlocked, ImageUrl</div>
            </div>
            <div>
                <a class="btn" asp-area="Stores" asp-controller="Warehouse" asp-action="DownloadSlotTemplate">Tải template</a>
            </div>
        </div>
        <form asp-area="Stores" asp-controller="Warehouse" asp-action="ImportSlots" method="post" enctype="multipart/form-data" style="margin-top:10px;">
            @Html.AntiForgeryToken()
            <input type="hidden" name="warehouseId" value="@Model.Id" />
            <input type="file" name="file" accept=".xlsx,.xls" />
            <button class="btn primary" type="submit">Upload & Import</button>
        </form>
    </div>
    <!-- Thay thế phần Quản lý Slot trong Edit.cshtml -->
    <div class="card">
        <h4>Quản lý Slot</h4>

        <!-- Search và filter -->
        <div style="display:flex;gap:8px;margin-bottom:12px;">
            <input type="text" id="slotSearchInput" placeholder="Tìm theo mã slot..."
                   style="flex:1;padding:8px 12px;" />
            <button type="button" class="btn" onclick="loadSlots(1)">Tìm kiếm</button>
            <button type="button" class="btn" onclick="clearSearch()">Xóa</button>
        </div>

        <!-- Container cho bảng slots load động -->
        <div id="slotsContainer">
            <table class="table" id="slotTable">
                <thead>
                    <tr>
                        <th>Mã</th>
                        <th>Row</th>
                        <th>Col</th>
                        <th>H</th>
                        <th>L</th>
                        <th>W</th>
                        <th>Giá/h</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="slotTableBody">
                    <!-- Slots sẽ được load bằng Ajax -->
                </tbody>
            </table>

            <!-- Pagination -->
            <div id="slotPagination" style="margin-top:12px;display:flex;gap:4px;justify-content:center;">
            </div>
        </div>

        <!-- Form thêm slot mới -->
        <hr />
        <h5>Thêm slot mới</h5>
        <div class="row-2" style="margin-top:10px;">
            <input type="text" id="slotCode" placeholder="Mã (VD: A1-01)" />
            <input type="number" id="slotRow" placeholder="Row" min="1" step="1" />
            <input type="number" id="slotCol" placeholder="Col" min="1" step="1" />
            <input type="number" id="slotH" placeholder="H (m)" min="0" step="0.01" />
            <input type="number" id="slotL" placeholder="L (m)" min="0" step="0.01" />
            <input type="number" id="slotW" placeholder="W (m)" min="0" step="0.01" />
            <input type="number" id="slotPrice" placeholder="Giá (đ/giờ)" min="0" step="1000" />
            <select id="slotStatus">
                <option value="4">Available</option>
                <option value="17">Occupied</option>
                <option value="7">Maintenance</option>
            </select>
            <button type="button" class="btn primary" id="btnAddSlot">+ Thêm Slot</button>
        </div>
    </div>

    <!-- Hidden container để lưu tất cả slots khi submit form -->
    <div id="allSlotsHidden" style="display:none;">
        <!-- Các input hidden sẽ được generate khi submit -->
    </div>
    <button type="submit" class="btn primary">Lưu thay đổi</button>
</form>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        const map = L.map('map').setView([@addr?.Latitude ?? 21.0278, @addr?.Longitude ?? 105.8342], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        let marker = L.marker([@addr?.Latitude ?? 21.0278, @addr?.Longitude ?? 105.8342], { draggable: true }).addTo(map);

        marker.on('dragend', function (e) {
            const lat = e.target.getLatLng().lat.toFixed(6);
            const lng = e.target.getLatLng().lng.toFixed(6);
            document.getElementById("lat").value = lat;
            document.getElementById("lng").value = lng;
            fetchReverse(lat, lng);
        });

        const geocoderControl = L.Control.geocoder({
            geocoder: L.Control.Geocoder.nominatim(),
            placeholder: '🔍 Tìm kiếm địa chỉ...',
            defaultMarkGeocode: false
        }).on('markgeocode', function (e) {
            const latlng = e.geocode.center;
            marker.setLatLng(latlng);
            map.setView(latlng, 15);
            document.getElementById("lat").value = latlng.lat.toFixed(6);
            document.getElementById("lng").value = latlng.lng.toFixed(6);
            fetchReverse(latlng.lat, latlng.lng);
        }).addTo(map);

        function fetchReverse(lat, lng) {
            fetch(`https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lng}&format=json`)
                .then(res => res.json())
                .then(d => {
                    const a = d.address || {};
                    document.getElementById("addressLine").value = d.display_name;
                    document.getElementById("city").value = a.city || a.state || '';
                    document.getElementById("district").value = a.county || a.suburb || '';
                    document.getElementById("ward").value = a.village || a.town || '';
                });
        }

            // ===== Helpers =====
        const tb = document.querySelector("#slotTable tbody");

        // escape để an toàn khi chèn HTML
        const esc = (v) => String(v ?? "").replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll('"',"&quot;");
        const dash = (v) => (v === null || v === undefined || v === "" || Number.isNaN(v)) ? "—" : v;

        // Tập đang có (kể cả slot từ DB đã render sẵn)
        const existingCodes = new Set();
        const existingPos   = new Set(); // set key = `${row}|${col}`

        // Đọc các dòng hiện tại để fill tập ban đầu
        function hydrateSetsFromTable() {
            existingCodes.clear();
            existingPos.clear();
            tb.querySelectorAll("tr").forEach(tr => {
                const code = tr.querySelector('input[name$=".Code"]')?.value?.toLowerCase()?.trim();              
                if (code) existingCodes.add(code);
            });
        }
        hydrateSetsFromTable();

        // Re-index lại name="slots[i].Field" sau khi thêm/xoá để binder nhận đúng
        function reindexTable() {
            const rows = Array.from(tb.querySelectorAll("tr"));
            rows.forEach((tr, i) => {
                tr.querySelectorAll("input[type=hidden]").forEach(inp => {
                    inp.name = inp.name.replace(/slots\[\d+\]\./, `slots[${i}].`);
                });
            });
        }

        // Thêm một dòng hiển thị + hidden inputs
        function appendRow(data) {
            const i = tb.querySelectorAll("tr").length;
            const price = Number(data.BasePricePerHour || 0);

            const tr = document.createElement("tr");
            tr.innerHTML = `
                <td><input type="hidden" name="slots[${i}].Code" value="${esc(data.Code)}" />${esc(data.Code)}</td>
                <td><input type="hidden" name="slots[${i}].HeightM" value="${esc(data.HeightM)}" />${dash(data.HeightM)}</td>
                <td><input type="hidden" name="slots[${i}].LengthM" value="${esc(data.LengthM)}" />${dash(data.LengthM)}</td>
                <td><input type="hidden" name="slots[${i}].WidthM" value="${esc(data.WidthM)}" />${dash(data.WidthM)}</td>
                <td><input type="hidden" name="slots[${i}].BasePricePerHour" value="${esc(price)}" />${price.toLocaleString('vi-VN')}</td>
                <td><input type="hidden" name="slots[${i}].Status" value="${esc(data.Status)}" />${esc(data.Status)}</td>
                <td><button type="button" class="btn danger" data-action="remove" aria-label="Xóa">X</button></td>
            `;
            tb.appendChild(tr);
        }

        // === Add Slot dynamically (đã thêm check “existing slot”) ===
        document.getElementById("btnAddSlot").addEventListener("click", function () {
            const code = slotCode.value.trim();
            const h    = parseFloat(slotH.value || "0");
            const l    = parseFloat(slotL.value || "0");
            const w    = parseFloat(slotW.value || "0");
            const price= parseFloat(slotPrice.value || "0");
            const status = slotStatus.value;

            if (!code) return alert("Nhập mã slot!");
            if (h <= 0 || l <= 0 || w <= 0) return alert("Kích thước phải > 0");

            // === CHECK TRÙNG: Code & (Row,Col) ===
            const codeKey = code.toLowerCase();

            if (existingCodes.has(codeKey)) {
                return alert(`Code "${code}" đã tồn tại.`);
            }

            // Thêm vào bảng + cập nhật tập
            appendRow({
                Code: code,
                HeightM: h, LengthM: l, WidthM: w,
                BasePricePerHour: price, Status: status
            });
            existingCodes.add(codeKey);
            existingPos.add(posKey);

            // Clear inputs
            slotCode.value="";
            slotH.value=""; slotL.value=""; slotW.value=""; slotPrice.value="";
            slotStatus.value="4";
        });

        // Xoá dòng: cập nhật sets + reindex
        tb.addEventListener("click", function (e) {
            const btn = e.target.closest('button[data-action="remove"]');
            if (!btn) return;

            const tr = btn.closest("tr");
            // Lấy giá trị hiện tại trước khi xoá để cập nhật set
            const code = tr.querySelector('input[name$=".Code"]')?.value?.toLowerCase()?.trim();
            tr.remove();
            reindexTable();

            if (code) existingCodes.delete(code);
        });
    </script>
    <script>
                // Thêm vào phần Scripts của Edit.cshtml
        let currentPage = 1;
        let pageSize = 10;
        let allSlots = []; // Lưu tất cả slots (cả từ DB và thêm mới)
        let deletedSlots = []; // Lưu các slots đã xóa

        // Load slots với phân trang
        async function loadSlots(page = 1) {
            const warehouseId = '@Model.Id';
            const searchTerm = document.getElementById('slotSearchInput').value;

            const response = await fetch(`/Stores/Warehouse/GetSlotsPaged?warehouseId=${warehouseId}&q=${searchTerm}&page=${page}&pageSize=${pageSize}`);
            const data = await response.json();

            currentPage = page;
            renderSlots(data.slots);
            renderPagination(data.totalPages, data.page);

            // Lưu slots từ DB
            if (page === 1 && !searchTerm) {
                allSlots = [...data.slots];
            }
        }

        // Render slots vào bảng
        function renderSlots(slots) {
            const tbody = document.getElementById('slotTableBody');
            tbody.innerHTML = '';

            slots.forEach((slot, index) => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${slot.code}</td>
                    <td>${slot.row}</td>
                    <td>${slot.col}</td>
                    <td>${slot.heightM}</td>
                    <td>${slot.lengthM}</td>
                    <td>${slot.widthM}</td>
                    <td>${slot.basePricePerHour.toLocaleString('vi-VN')} ₫</td>
                    <td>${getStatusText(slot.status)}</td>
                    <td>
                        <button type="button" class="btn danger" onclick="removeSlot('${slot.id}')">X</button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }

        // Render phân trang
        function renderPagination(totalPages, currentPage) {
            const container = document.getElementById('slotPagination');
            container.innerHTML = '';

            for (let i = 1; i <= totalPages; i++) {
                const btn = document.createElement('button');
                btn.className = `btn ${i === currentPage ? 'primary' : ''}`;
                btn.textContent = i;
                btn.onclick = () => loadSlots(i);
                container.appendChild(btn);
            }
        }

        // Xóa slot
        function removeSlot(slotId) {
            if (confirm('Xác nhận xóa slot này?')) {
                deletedSlots.push(slotId);
                allSlots = allSlots.filter(s => s.id !== slotId);
                loadSlots(currentPage);
            }
        }

        // Clear search
        function clearSearch() {
            document.getElementById('slotSearchInput').value = '';
            loadSlots(1);
        }

        // Thêm slot mới
        document.getElementById('btnAddSlot').addEventListener('click', function() {
            const newSlot = {
                id: 'new_' + Date.now(),
                code: document.getElementById('slotCode').value,
                row: parseInt(document.getElementById('slotRow').value),
                col: parseInt(document.getElementById('slotCol').value),
                heightM: parseFloat(document.getElementById('slotH').value),
                lengthM: parseFloat(document.getElementById('slotL').value),
                widthM: parseFloat(document.getElementById('slotW').value),
                basePricePerHour: parseFloat(document.getElementById('slotPrice').value),
                status: parseInt(document.getElementById('slotStatus').value),
                isNew: true
            };

            // Validate
            if (!newSlot.code) {
                alert('Vui lòng nhập mã slot');
                return;
            }

            // Check duplicate
            if (allSlots.some(s => s.code.toLowerCase() === newSlot.code.toLowerCase())) {
                alert('Mã slot đã tồn tại');
                return;
            }

            allSlots.push(newSlot);
            loadSlots(currentPage);

            // Clear form
            document.getElementById('slotCode').value = '';
            document.getElementById('slotRow').value = '';
            document.getElementById('slotCol').value = '';
            document.getElementById('slotH').value = '';
            document.getElementById('slotL').value = '';
            document.getElementById('slotW').value = '';
            document.getElementById('slotPrice').value = '';
        });

        // Trước khi submit form, generate hidden inputs cho tất cả slots
        document.querySelector('form').addEventListener('submit', function(e) {
            const hiddenContainer = document.getElementById('allSlotsHidden');
            hiddenContainer.innerHTML = '';

            // Generate hidden inputs cho tất cả slots
            allSlots.forEach((slot, index) => {
                if (!deletedSlots.includes(slot.id)) {
                    hiddenContainer.innerHTML += `
                        <input type="hidden" name="slots[${index}].Code" value="${slot.code}" />
                        <input type="hidden" name="slots[${index}].Row" value="${slot.row}" />
                        <input type="hidden" name="slots[${index}].Col" value="${slot.col}" />
                        <input type="hidden" name="slots[${index}].HeightM" value="${slot.heightM}" />
                        <input type="hidden" name="slots[${index}].LengthM" value="${slot.lengthM}" />
                        <input type="hidden" name="slots[${index}].WidthM" value="${slot.widthM}" />
                        <input type="hidden" name="slots[${index}].BasePricePerHour" value="${slot.basePricePerHour}" />
                        <input type="hidden" name="slots[${index}].Status" value="${slot.status}" />
                    `;
                }
            });
        });

        // Helper function
        function getStatusText(status) {
            switch(status) {
                case 4: return 'Available';
                case 17: return 'Occupied';
                case 7: return 'Maintenance';
                default: return 'Unknown';
            }
        }

        // Load initial data
        window.addEventListener('DOMContentLoaded', () => {
            loadSlots(1);
        });
    </script>
}
