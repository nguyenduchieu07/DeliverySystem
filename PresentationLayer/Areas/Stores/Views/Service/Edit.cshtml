@using PresentationLayer.Areas.Stores.Models
@model ServiceEditVM
@{
    ViewBag.Title = "Sửa dịch vụ";
}
<div class="page-head">
    <h1 class="page-title">@Model.Name</h1>
    <div class="page-actions">
        <a class="btn" href="@Url.Action("Index")">Quay lại</a>
    </div>
</div>
@using (Html.BeginForm("Edit", "Service", FormMethod.Post, new { id = Model.Id }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    <div class="grid" style="grid-template-columns:1fr; max-width:980px">
        @Html.Partial("~/Areas/Stores/Views/Shared/_CategoryPicker.cshtml", Model)

        <div class="card" style="margin-bottom:12px">
            <label>Tên</label>@Html.TextBoxFor(m => m.Name)
            <label>Mô tả</label>@Html.TextAreaFor(m => m.Description, 3, 80, null)
            <div class="row">
                <div><label>Đơn vị</label>@Html.TextBoxFor(m => m.Unit)</div>
                <div><label>Giá cơ bản</label>@Html.TextBoxFor(m => m.BasePrice, new { type = "number", step = "0.01" })</div>
                <div><label>Trạng thái</label>@Html.DropDownListFor(m => m.IsActive, new SelectList(new[] { new { v = true, t = "Active" }, new { v = false, t = "Inactive" } }, "v", "t", Model.IsActive))</div>
            </div>
            <div class="row">
                <div><label>Hiển thị</label>@Html.DropDownListFor(m => m.IsPublished, new SelectList(new[] { new { v = false, t = "Unpublished" }, new { v = true, t = "Published" } }, "v", "t", Model.IsPublished))</div>
            </div>
            <div style="margin-top:10px"><button class="btn primary" type="submit">Lưu</button></div>
        </div>

        <section class="section">
            <div class="header"><div class="title">Bảng giá theo bậc (tiers)</div></div>
            <div class="card">
                @Html.Partial("_TierForm", new PriceTierVM { ServiceId = Model.Id!.Value, ValidFrom = DateTime.UtcNow.Date })
            </div>
            <div style="overflow:auto">
                <table class="table">
                    <thead><tr><th>Hiệu lực từ</th><th>Đến</th><th>Min</th><th>Max</th><th>Giá</th><th></th></tr></thead>
                    <tbody>
                        @foreach (var t in Model.Tiers)
                        {
                            <tr>
                                <td>@t.ValidFrom.ToString("yyyy-MM-dd")</td>
                                <td>@(t.ValidTo.HasValue ? t.ValidTo.Value.ToString("yyyy-MM-dd") : "—")</td>
                                <td>@(t.MinQty?.ToString() ?? "—")</td>
                                <td>@(t.MaxQty?.ToString() ?? "—")</td>
                                <td>@t.Price.ToString("N0")</td>
                                <td>
                                    <form method="post" action="@Url.Action("DeleteTier", "Service", new { serviceId = Model.Id, tierId = t.Id })" onsubmit="return confirm('Xoá tier này?')">
                                        @Html.AntiForgeryToken()
                                        <button class="badge" type="submit">Xoá</button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </section>
    </div>
}
@section Scripts {
    <script>
        (function () {
            const root = document.currentScript.closest('[data-cat-picker]') || document.querySelector('[data-cat-picker]');
            if (!root) return;
            const parentWrap = root.querySelector('[data-parent-wrap]');
            const childWrap = root.querySelector('[data-child-wrap]');
            const parentSel = root.querySelector('[data-parent]');
            const childSel = root.querySelector('[data-child]');
            const crumb = root.querySelector('[data-crumb]');

            function setOptions(select, items, placeholder) {
                select.innerHTML = '';
                const def = document.createElement('option'); def.value = ''; def.textContent = placeholder || '— Chọn —'; select.appendChild(def);
                for (const it of items) { const o = document.createElement('option'); o.value = it.id; o.textContent = it.name; select.appendChild(o); }
            }

            async function loadParents(selected) {
                parentSel.classList.add('hidden');
                const sk = document.createElement('div'); sk.className = 'skeleton'; parentWrap.appendChild(sk);
                const res = await fetch('@Url.Content("~/categories/parents")');
                const data = await res.json();
                parentWrap.removeChild(sk); parentSel.classList.remove('hidden');
                setOptions(parentSel, data, '— Chọn danh mục cha —');
                if (selected) { parentSel.value = selected; if (!parentSel.value) parentSel.selectedIndex = 0; }
                parentSel.dispatchEvent(new Event('change'));
            }

            async function loadChildren(parentId, selected) {
                childWrap.classList.remove('hidden'); childSel.classList.add('hidden');
                const sk2 = document.createElement('div'); sk2.className = 'skeleton'; childWrap.appendChild(sk2);
                const res = await fetch('@Url.Content("~/categories/childrens")' + '?parentId=' + parentId);
                const data = await res.json();
                childWrap.removeChild(sk2); childSel.classList.remove('hidden');
                setOptions(childSel, data, '— Chọn danh mục con —');
                if (selected) { childSel.value = selected; if (!childSel.value) childSel.selectedIndex = 0; }
            }

            parentSel.addEventListener('change', async function () {
                const pid = parentSel.value; const ptext = parentSel.options[parentSel.selectedIndex]?.textContent || '';
                crumb.innerHTML = '';
                if (!pid) { childWrap.classList.add('hidden'); setOptions(childSel, [], '— Chọn danh mục con —'); return; }
                crumb.appendChild(pill(ptext)); crumb.appendChild(document.createTextNode(' / '));
                await loadChildren(pid, '@Model.CategoryId');
            });

            childSel.addEventListener('change', function () {
                const ptext = parentSel.options[parentSel.selectedIndex]?.textContent || '';
                const ctext = childSel.options[childSel.selectedIndex]?.textContent || '';
                crumb.innerHTML = '';
                if (ptext) crumb.appendChild(pill(ptext));
                if (ctext) { crumb.appendChild(document.createTextNode(' / ')); crumb.appendChild(pill(ctext)); }
            });

            function pill(text) { const el = document.createElement('span'); el.className = 'pill'; el.textContent = text; return el; }

            // Initial load with possible preselected values from Model
            loadParents('@Model.ParentCategoryId');
        })();
    </script>
}
