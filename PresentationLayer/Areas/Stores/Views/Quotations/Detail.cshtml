@model PresentationLayer.Models.StoreQuotationDetailViewModel

@{
	ViewData["Title"] = "Chi tiết Báo giá";
}

<style>
	.detail-container {
		padding: 30px;
		background: #f8f9fa;
		min-height: 100vh;
	}

	.back-button {
		display: inline-flex;
		align-items: center;
		gap: 8px;
		padding: 10px 20px;
		background: white;
		border: 2px solid #e0e0e0;
		border-radius: 10px;
		color: #666;
		text-decoration: none;
		font-weight: 600;
		margin-bottom: 20px;
		transition: all 0.3s;
	}

	.back-button:hover {
		border-color: #667eea;
		color: #667eea;
		transform: translateX(-5px);
	}

	.detail-header {
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		color: white;
		padding: 40px;
		border-radius: 15px;
		margin-bottom: 30px;
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
	}

	.detail-header h1 {
		margin: 0 0 15px 0;
		font-size: 2.2rem;
	}

	.header-meta {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 20px;
		margin-top: 20px;
	}

	.meta-item {
		background: rgba(255, 255, 255, 0.2);
		padding: 15px;
		border-radius: 10px;
	}

	.meta-label {
		font-size: 0.85rem;
		opacity: 0.9;
		margin-bottom: 5px;
	}

	.meta-value {
		font-size: 1.3rem;
		font-weight: 700;
	}

	.content-grid {
		display: grid;
		grid-template-columns: 2fr 1fr;
		gap: 30px;
		margin-bottom: 30px;
	}

	.info-card {
		background: white;
		padding: 30px;
		border-radius: 15px;
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
	}

	.info-card h3 {
		color: #667eea;
		margin-bottom: 20px;
		font-size: 1.3rem;
		border-bottom: 2px solid #f0f0f0;
		padding-bottom: 10px;
	}

	.info-row {
		display: flex;
		justify-content: space-between;
		padding: 12px 0;
		border-bottom: 1px solid #f8f9fa;
	}

	.info-label {
		color: #666;
		font-weight: 500;
	}

	.info-value {
		color: #333;
		font-weight: 600;
	}

	.order-items {
		margin-top: 20px;
	}

	.order-item {
		background: #f8f9fa;
		padding: 15px;
		border-radius: 10px;
		margin-bottom: 10px;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.item-info {
		flex: 1;
	}

	.item-name {
		font-weight: 600;
		color: #333;
		margin-bottom: 5px;
	}

	.item-details {
		font-size: 0.9rem;
		color: #666;
	}

	.item-price {
		font-size: 1.2rem;
		font-weight: 700;
		color: #27ae60;
	}

	.total-section {
		background: #f8f9fa;
		padding: 20px;
		border-radius: 10px;
		margin-top: 20px;
	}

	.total-row {
		display: flex;
		justify-content: space-between;
		padding: 10px 0;
		font-size: 1.1rem;
	}

	.total-row.final {
		border-top: 2px solid #667eea;
		margin-top: 10px;
		padding-top: 15px;
		font-size: 1.5rem;
		font-weight: 700;
		color: #667eea;
	}

	.action-panel {
		background: white;
		padding: 30px;
		border-radius: 15px;
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
		position: sticky;
		top: 20px;
	}

	.action-panel h3 {
		color: #667eea;
		margin-bottom: 20px;
		font-size: 1.3rem;
	}

	.action-btn {
		width: 100%;
		padding: 15px;
		border: none;
		border-radius: 10px;
		font-size: 1.05rem;
		font-weight: 600;
		cursor: pointer;
		margin-bottom: 15px;
		transition: all 0.3s;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 8px;
	}

	.action-btn.approve {
		background: #27ae60;
		color: white;
	}

	.action-btn.approve:hover {
		background: #229954;
		transform: translateY(-2px);
		box-shadow: 0 5px 15px rgba(39, 174, 96, 0.3);
	}

	.action-btn.revise {
		background: #3498db;
		color: white;
	}

	.action-btn.revise:hover {
		background: #2980b9;
		transform: translateY(-2px);
		box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
	}

	.action-btn.reject {
		background: #e74c3c;
		color: white;
	}

	.action-btn.reject:hover {
		background: #c0392b;
		transform: translateY(-2px);
		box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
	}

	.action-btn:disabled {
		background: #ccc;
		cursor: not-allowed;
		transform: none !important;
	}

	.status-info {
		background: #e8f0fe;
		padding: 15px;
		border-radius: 10px;
		margin-bottom: 20px;
		border-left: 4px solid #667eea;
	}

	.status-info.warning {
		background: #fff3cd;
		border-left-color: #f39c12;
	}

	.status-info.success {
		background: #d4edda;
		border-left-color: #27ae60;
	}

	.status-info.danger {
		background: #f8d7da;
		border-left-color: #e74c3c;
	}

	/* Modal */
	.modal {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.7);
		z-index: 1000;
		justify-content: center;
		align-items: center;
	}

	.modal.active {
		display: flex;
	}

	.modal-content {
		background: white;
		padding: 40px;
		border-radius: 20px;
		max-width: 500px;
		width: 90%;
		box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
	}

	.modal-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 20px;
	}

	.modal-header h3 {
		color: #667eea;
		margin: 0;
	}

	.modal-close {
		background: none;
		border: none;
		font-size: 2rem;
		cursor: pointer;
		color: #999;
	}

	.form-group {
		margin-bottom: 20px;
	}

	.form-group label {
		display: block;
		margin-bottom: 8px;
		color: #333;
		font-weight: 600;
	}

	.form-control {
		width: 100%;
		padding: 12px 15px;
		border: 2px solid #e0e0e0;
		border-radius: 10px;
		font-size: 1rem;
		transition: all 0.3s;
	}

	.form-control:focus {
		outline: none;
		border-color: #667eea;
		box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
	}

	.discount-options {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 15px;
		margin-bottom: 15px;
	}

	.modal-buttons {
		display: flex;
		gap: 15px;
		margin-top: 25px;
	}

	.modal-buttons button {
		flex: 1;
		padding: 12px;
		border: none;
		border-radius: 10px;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s;
	}

	.btn-cancel {
		background: #e0e0e0;
		color: #666;
	}

	.btn-cancel:hover {
		background: #d0d0d0;
	}

	.btn-submit {
		background: #667eea;
		color: white;
	}

	.btn-submit:hover {
		background: #5568d3;
	}

	@@media (max-width: 1024px) {
		.content-grid {
			grid-template-columns: 1fr;
		}

		.action-panel {
			position: static;
		}

		.header-meta {
			grid-template-columns: 1fr;
		}
	}

	.view-link {
		background-color: #7b6ef6; /* pastel tím */
		color: white;
		border: none;
		padding: 6px 14px;
		border-radius: 8px;
		font-size: 14px;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.25s ease;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	.view-link:hover {
		background-color: #6a5de0;
		transform: translateY(-2px);
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
	}

	.view-link:active {
		transform: translateY(0);
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}
</style>

@{
	var quotation = Model.Quotation;
}

<div class="detail-container">
	<a href="@Url.Action("Index")" class="back-button">
		← Quay lại danh sách
	</a>

	<div class="detail-header">
		<h1>📋 Chi tiết Báo giá #@quotation.Id.ToString().Substring(0, 8).ToUpper()</h1>

		<div class="header-meta">
			<div class="meta-item">
				<div class="meta-label">Khách hàng</div>
				<div class="meta-value">@quotation.Customer.FullName</div>
			</div>
			<div class="meta-item">
				<div class="meta-label">Tổng tiền</div>
				<div class="meta-value">@quotation.TotalAmount.ToString("N0") đ</div>
			</div>
			<div class="meta-item">
				<div class="meta-label">Hiệu lực đến</div>
				<div class="meta-value">@quotation.ValidUntil.ToString("dd/MM/yyyy HH:mm")</div>
			</div>
			<div class="meta-item">
				<div class="meta-label">Trạng thái</div>
				<div class="meta-value">
					@switch (quotation.Status)
					{
						case DataAccessLayer.Enums.StatusValue.Draft:
							<span>📝 Có thể báo giá</span>
							break;
						case DataAccessLayer.Enums.StatusValue.Sent:
							<span>⏳ Chờ xử lý</span>
							break;
						case DataAccessLayer.Enums.StatusValue.Revised:
							<span>✏️ Đã chỉnh sửa</span>
							break;
						case DataAccessLayer.Enums.StatusValue.Active:
							<span>✅ Đã chấp nhận</span>
							break;
						case DataAccessLayer.Enums.StatusValue.InActive:
							<span>❌ Đã từ chối</span>
							break;
					}
				</div>
			</div>
		</div>
	</div>

	<div class="content-grid">
		<!-- Left Column -->
		<div>
			<!-- Customer Info -->
			<div class="info-card">
				<h3>👤 Thông tin khách hàng</h3>
				<div class="info-row">
					<span class="info-label">Họ tên:</span>
					<span class="info-value">@quotation.Customer.FullName</span>
				</div>
				<div class="info-row">
					<span class="info-label">Email:</span>
					<span class="info-value">@quotation.Customer.Email</span>
				</div>
				<div class="info-row">
					<span class="info-label">Số điện thoại:</span>
					<span class="info-value">@quotation.Customer.PhoneNumber</span>
				</div>
			</div>

			<!-- Order Details -->
			<div class="info-card" style="margin-top: 30px;">
				<h3>📦 Chi tiết đơn hàng</h3>

				@if (quotation.Orders != null && quotation.Orders.Any())
				{
					foreach (var order in quotation.Orders)
					{
						<div class="order-items">
							@foreach (var item in order.OrderItems)
							{
								<div class="order-item">
									<div class="item-info">
										<div class="item-name">@item</div>
										<div class="item-details">
											Số lượng: @item.Quantity @item
										</div>
									</div>
									<div class="item-price">
										@item
									</div>
								</div>
							}
						</div>
					}
				}
				else
				{
					<div style="text-align: center; padding: 30px; color: #999;">
						<p>Chưa có chi tiết đơn hàng</p>
					</div>
				}

				<div class="total-section">
					<div class="total-row">
						<span>Tạm tính:</span>
						<span>@((quotation.TotalAmount / 1.1m).ToString("N0")) đ</span>
					</div>
					<div class="total-row">
						<span>VAT (10%):</span>
						<span>@((quotation.TotalAmount - quotation.TotalAmount / 1.1m).ToString("N0")) đ</span>
					</div>
					<div class="total-row final">
						<span>TỔNG CỘNG:</span>
						<span>@quotation.TotalAmount.ToString("N0") đ</span>
					</div>
				</div>
			</div>

			<div class="info-card">
				<h3>📑 Danh sách hợp đồng</h3>

				<!-- Vùng hiển thị danh sách hợp đồng -->
				<div id="contractsContainer">
					@foreach (var contract in Model.Contracts)
					{
						<div class="info-row">
							<span class="info-value">@contract.WarehouseSlot.Code</span>
						</div>
					}

				</div>
			</div>
		</div>

		<!-- Right Column - Actions -->
		<div>
			<div class="action-panel">
				<h3>⚡ Thao tác nhanh</h3>

				@{
					var timeLeft = (quotation.ValidUntil - DateTime.UtcNow).TotalHours;
					var isExpired = timeLeft <= 0;
					var isUrgent = timeLeft > 0 && timeLeft <= 24;
				}

				@if (quotation.Status != StatusValue.Draft)
				{
					if (isExpired)
					{
						<div class="status-info danger">
							<strong>⚠️ Báo giá đã hết hạn</strong>
							<p style="margin: 5px 0 0 0; font-size: 0.9rem;">
								Hết hạn lúc: @quotation.ValidUntil.ToString("dd/MM/yyyy HH:mm")
							</p>
						</div>
					}
					else if (isUrgent)
					{
						<div class="status-info warning">
							<strong>⏰ Sắp hết hạn</strong>
							<p style="margin: 5px 0 0 0; font-size: 0.9rem;">
								Còn @Math.Round(timeLeft, 1) giờ
							</p>
						</div>
					}
				}
				else
				{
					<button class="action-btn revise" onclick="showSuggestModal()">
						📝 Đề xuất giá
					</button>
				}


				@if (quotation.Status == DataAccessLayer.Enums.StatusValue.Sent || quotation.Status == DataAccessLayer.Enums.StatusValue.Revised)
				{
					<button class="action-btn approve" onclick="approveQuotation()">
						✅ Phê duyệt báo giá
					</button>

					<button class="action-btn revise" onclick="showReviseModal()">
						✏️ Chỉnh sửa giá
					</button>

					<button class="action-btn reject" onclick="showRejectModal()">
						❌ Từ chối
					</button>
				}
				else if (quotation.Status == DataAccessLayer.Enums.StatusValue.Active)
				{
					<div class="status-info success">
						<strong>✅ Báo giá đã được chấp nhận</strong>
						<p style="margin: 5px 0 0 0; font-size: 0.9rem;">
							Cập nhật lúc: @quotation.UpdatedAt?.ToString("dd/MM/yyyy HH:mm")
						</p>
					</div>
				}
				else if (quotation.Status == DataAccessLayer.Enums.StatusValue.InActive)
				{
					<div class="status-info danger">
						<strong>❌ Báo giá đã bị từ chối</strong>
						<p style="margin: 5px 0 0 0; font-size: 0.9rem;">
							Cập nhật lúc: @quotation.UpdatedAt?.ToString("dd/MM/yyyy HH:mm")
						</p>
					</div>
				}

				<div class="info-card" style="margin-top: 20px; padding: 20px;">
					<h4 style="margin: 0 0 15px 0; color: #666;">📊 Thông tin báo giá</h4>
					<div class="info-row">
						<span class="info-label">Ngày tạo:</span>
						<span class="info-value"
						      style="font-size: 0.9rem;">@quotation.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
					</div>
					<div class="info-row">
						<span class="info-label">Cập nhật:</span>
						<span class="info-value"
						      style="font-size: 0.9rem;">@(quotation.UpdatedAt?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</span>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Suggest Modal -->
<div id="suggestModal" class="modal">
	<div class="modal-content">
		<div class="modal-header">
			<h3> 📝 Đề xuất báo giá</h3>
			<button class="modal-close" onclick="closeSuggestModal()">×</button>
		</div>

		<div class="form-group">
			<label>Đề xuất giá theo...</label>

			<div class="discount-options">
				<label
					style="display: flex; align-items: center; gap: 8px; padding: 12px; background: #f8f9fa; border-radius: 8px; cursor: pointer;">
					<input type="radio" name="suggestDiscountType" value="percent" checked>
					<span>Giảm theo %</span>
				</label>
				<label
					style="display: flex; align-items: center; gap: 8px; padding: 12px; background: #f8f9fa; border-radius: 8px; cursor: pointer;">
					<input type="radio" name="suggestDiscountType" value="absolute">
					<span>Giảm cố định</span>
				</label>
			</div>
		</div>

		<div class="form-group" id="percentGroup">
			<label>Giảm giá (%):</label>
			<input type="number" id="suggestPercentDiscount" class="form-control" min="0" max="100" step="1"
			       placeholder="VD: 10">
		</div>

		<div class="form-group" id="absoluteGroup" style="display: none;">
			<label>Giảm giá (VNĐ):</label>
			<input type="number" id="suggestAbsoluteDiscount" class="form-control" min="0" step="1000"
			       placeholder="VD: 100000">
		</div>

		<div class="form-group">
			<label>Ghi chú (tùy chọn):</label>
			<textarea id="suggestNote" class="form-control" rows="3" placeholder="Ghi chú cho báo giá"></textarea>
		</div>

		<div style="background: #e8f0fe; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
			<div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
				<span>Giá gốc:</span>
				<strong>@quotation.TotalAmount.ToString("N0") đ</strong>
			</div>
			<div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
				<span>Giảm giá:</span>
				<strong id="discountSuggestAmount">0 đ</strong>
			</div>
			<div
				style="display: flex; justify-content: space-between; padding-top: 10px; border-top: 2px solid #667eea; font-size: 1.1rem;">
				<span>Giá đề xuất:</span>
				<strong style="color: #667eea;" id="newSuggestAmount">@quotation.TotalAmount.ToString("N0") đ</strong>
			</div>
		</div>

		<div class="modal-buttons">
			<button class="btn-cancel" onclick="closeSuggestModal()">Hủy</button>
			<button class="btn-submit" onclick="submitSuggest()">Xác nhận báo giá</button>
		</div>
	</div>
</div>

<!-- Revise Modal -->
<div id="reviseModal" class="modal">
	<div class="modal-content">
		<div class="modal-header">
			<h3>✏️ Chỉnh sửa giá báo giá</h3>
			<button class="modal-close" onclick="closeReviseModal()">×</button>
		</div>

		<div class="form-group">
			<label>Chọn loại giảm giá:</label>
			<div class="discount-options">
				<label
					style="display: flex; align-items: center; gap: 8px; padding: 12px; background: #f8f9fa; border-radius: 8px; cursor: pointer;">
					<input type="radio" name="discountType" value="percent" checked>
					<span>Giảm theo % </span>
				</label>
				<label
					style="display: flex; align-items: center; gap: 8px; padding: 12px; background: #f8f9fa; border-radius: 8px; cursor: pointer;">
					<input type="radio" name="discountType" value="absolute">
					<span>Giảm cố định</span>
				</label>
			</div>
		</div>

		<div class="form-group" id="percentGroup">
			<label>Giảm giá (%):</label>
			<input type="number" id="percentDiscount" class="form-control" min="0" max="100" step="1"
			       placeholder="VD: 10">
		</div>

		<div class="form-group" id="absoluteGroup" style="display: none;">
			<label>Giảm giá (VNĐ):</label>
			<input type="number" id="absoluteDiscount" class="form-control" min="0" step="1000"
			       placeholder="VD: 100000">
		</div>

		<div class="form-group">
			<label>Ghi chú (tùy chọn):</label>
			<textarea id="reviseNote" class="form-control" rows="3" placeholder="Lý do chỉnh sửa giá..."></textarea>
		</div>

		<div style="background: #e8f0fe; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
			<div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
				<span>Giá gốc:</span>
				<strong>@quotation.TotalAmount.ToString("N0") đ</strong>
			</div>
			<div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
				<span>Giảm giá:</span>
				<strong id="discountAmount">0 đ</strong>
			</div>
			<div
				style="display: flex; justify-content: space-between; padding-top: 10px; border-top: 2px solid #667eea; font-size: 1.1rem;">
				<span>Giá mới:</span>
				<strong style="color: #667eea;" id="newAmount">@quotation.TotalAmount.ToString("N0") đ</strong>
			</div>
		</div>

		<div class="modal-buttons">
			<button class="btn-cancel" onclick="closeReviseModal()">Hủy</button>
			<button class="btn-submit" onclick="submitRevise()">Xác nhận chỉnh sửa</button>
		</div>
	</div>
</div>

<!-- Reject Modal -->
<div id="rejectModal" class="modal">
	<div class="modal-content">
		<div class="modal-header">
			<h3>❌ Từ chối báo giá</h3>
			<button class="modal-close" onclick="closeRejectModal()">×</button>
		</div>
		<div class="form-group">
			<label>Lý do từ chối:</label>
			<textarea id="rejectReason" class="form-control" rows="4" placeholder="Nhập lý do từ chối báo giá..."
			          required></textarea>
		</div>

		<div style="background: #f8d7da; color: #721c24; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
			<strong>⚠️ Lưu ý:</strong> Hành động này không thể hoàn tác!
		</div>

		<div class="modal-buttons">
			<button class="btn-cancel" onclick="closeRejectModal()">Hủy</button>
			<button class="btn-submit" style="background: #e74c3c;" onclick="submitReject()">Xác nhận từ chối</button>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		const quotationId = '@quotation.Id';
		const originalAmount = @quotation.TotalAmount;

		// Approve quotation
		async function approveQuotation() {
			if (!confirm('Bạn có chắc chắn muốn phê duyệt báo giá này?')) return;

			try {
				const response = await fetch(`/Stores/Quotations/Approve/${quotationId}`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					}
				});

				if (response.ok) {
					alert('✅ Phê duyệt báo giá thành công!');
					location.reload();
				} else {
					alert('❌ Không thể phê duyệt báo giá!');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('Có lỗi xảy ra!');
			}
		}

		// Show revise modal
		function showSuggestModal() {
			document.getElementById('suggestModal').classList.add('active');
			updateReviseCalculation();
		}

		// Close revise modal
		function closeSuggestModal() {
			document.getElementById('suggestModal').classList.remove('active');
			document.getElementById('percentDiscount').value = '';
			document.getElementById('absoluteDiscount').value = '';
			document.getElementById('reviseNote').value = '';
		}


		// Show revise modal
		function showReviseModal() {
			document.getElementById('reviseModal').classList.add('active');
			updateReviseCalculation();
		}

		// Close revise modal
		function closeReviseModal() {
			document.getElementById('reviseModal').classList.remove('active');
			document.getElementById('percentDiscount').value = '';
			document.getElementById('absoluteDiscount').value = '';
			document.getElementById('reviseNote').value = '';
		}

		// Discount type change
		document.querySelectorAll('input[name="discountType"]').forEach(radio => {
			radio.addEventListener('change', function () {
				if (this.value === 'percent') {
					document.getElementById('percentGroup').style.display = 'block';
					document.getElementById('absoluteGroup').style.display = 'none';
					document.getElementById('absoluteDiscount').value = '';
				} else {
					document.getElementById('percentGroup').style.display = 'none';
					document.getElementById('absoluteGroup').style.display = 'block';
					document.getElementById('percentDiscount').value = '';
				}
				updateReviseCalculation();
			});
		});

		// Update calculation on input
		document.getElementById('percentDiscount').addEventListener('input', updateReviseCalculation);
		document.getElementById('absoluteDiscount').addEventListener('input', updateReviseCalculation);

		function updateReviseCalculation() {
			const discountType = document.querySelector('input[name="discountType"]:checked').value;
			let discountAmount = 0;

			if (discountType === 'percent') {
				const percent = parseFloat(document.getElementById('percentDiscount').value) || 0;
				discountAmount = Math.round(originalAmount * percent / 100);
			} else {
				discountAmount = parseFloat(document.getElementById('absoluteDiscount').value) || 0;
			}

			const newAmount = Math.max(0, originalAmount - discountAmount);

			document.getElementById('discountAmount').textContent = discountAmount.toLocaleString('vi-VN') + ' đ';
			document.getElementById('newAmount').textContent = newAmount.toLocaleString('vi-VN') + ' đ';
		}


		function updateReviseCalculation() {
			const discountType = document.querySelector('input[name="discountType"]:checked').value;
			let discountAmount = 0;

			if (discountType === 'percent') {
				const percent = parseFloat(document.getElementById('percentDiscount').value) || 0;
				discountAmount = Math.round(originalAmount * percent / 100);
			} else {
				discountAmount = parseFloat(document.getElementById('absoluteDiscount').value) || 0;
			}

			const newAmount = Math.max(0, originalAmount - discountAmount);

			document.getElementById('discountAmount').textContent = discountAmount.toLocaleString('vi-VN') + ' đ';
			document.getElementById('newAmount').textContent = newAmount.toLocaleString('vi-VN') + ' đ';
		}

		// Discount type change on suggest
		document.querySelectorAll('input[name="suggestDiscountType"]').forEach(radio => {
			radio.addEventListener('change', function () {
				if (this.value === 'percent') {
					document.getElementById('percentGroup').style.display = 'block';
					document.getElementById('absoluteGroup').style.display = 'none';
					document.getElementById('sugggestAbsoluteDiscount').value = '';
					document.getElementById('sugggestAbsoluteDiscount').value = 0;
				} else {
					document.getElementById('percentGroup').style.display = 'none';
					document.getElementById('absoluteGroup').style.display = 'block';
					document.getElementById('suggestPercentDiscount').value = '';
					document.getElementById('suggestPercentDiscount').value = 0;
				}

				updateReviseCalculation();
			});
		});

		// Update calculation on input of suggest
		document.getElementById('suggestPercentDiscount').addEventListener('input', updateSuggestCalculation);
		document.getElementById('suggestAbsoluteDiscount').addEventListener('input', updateSuggestCalculation);

		function updateSuggestCalculation() {
			const discountType = document.querySelector('input[name="suggestDiscountType"]:checked').value;
			let discountAmount = 0;

			if (discountType === 'percent') {
				const percent = parseFloat(document.getElementById('suggestPercentDiscount').value) || 0;
				discountAmount = Math.round(originalAmount * percent / 100);
			} else {
				discountAmount = parseFloat(document.getElementById('suggestAbsoluteDiscount').value) || 0;
			}

			const newAmount = Math.max(0, originalAmount - discountAmount);

			document.getElementById('discountSuggestAmount').textContent = discountAmount.toLocaleString('vi-VN') + ' đ';
			document.getElementById('newSuggestAmount').textContent = newAmount.toLocaleString('vi-VN') + ' đ';
		}

		// Submit suggest
		async function submitSuggest() {
			const discountType = document.querySelector('input[name="suggestDiscountType"]:checked').value;
			const percentDiscount = discountType === 'percent' ? parseFloat(document.getElementById('suggestPercentDiscount').value) : null;
			const absoluteDiscount = discountType === 'absolute' ? parseFloat(document.getElementById('suggestAbsoluteDiscount').value) : null;
			const note = document.getElementById('suggestNote').value;

			if (!percentDiscount && !absoluteDiscount) {
				alert('Vui lòng nhập giá trị giảm giá!');
				return;
			}

			try {
				const response = await fetch(`/Stores/Quotations/Suggest/${quotationId}`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						percentDiscount: percentDiscount,
						absoluteDiscount: absoluteDiscount,
						note: note
					})
				});

				if (response.ok) {
					const result = await response.json();
					alert(`✅ Tạo báo giá thành công!\n\nGiá mới: ${result.totalAmount.toLocaleString('vi-VN')} đ\nHiệu lực đến: ${new Date(result.validUntil).toLocaleString('vi-VN')}`);
					location.reload();
				} else {
					alert('❌ Không thể tạo báo giá!');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('Có lỗi xảy ra!');
			}
		}


		// Submit revise
		async function submitRevise() {
			const discountType = document.querySelector('input[name="discountType"]:checked').value;
			const percentDiscount = discountType === 'percent' ? parseFloat(document.getElementById('percentDiscount').value) : null;
			const absoluteDiscount = discountType === 'absolute' ? parseFloat(document.getElementById('absoluteDiscount').value) : null;
			const note = document.getElementById('reviseNote').value;

			if (!percentDiscount && !absoluteDiscount) {
				alert('Vui lòng nhập giá trị giảm giá!');
				return;
			}

			try {
				const response = await fetch(`/Stores/Quotations/Revise/${quotationId}`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						percentDiscount: percentDiscount,
						absoluteDiscount: absoluteDiscount,
						note: note
					})
				});

				if (response.ok) {
					const result = await response.json();
					alert(`✅ Chỉnh sửa giá thành công!\n\nGiá mới: ${result.totalAmount.toLocaleString('vi-VN')} đ\nHiệu lực đến: ${new Date(result.validUntil).toLocaleString('vi-VN')}`);
					location.reload();
				} else {
					alert('❌ Không thể chỉnh sửa giá!');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('Có lỗi xảy ra!');
			}
		}

		// Show reject modal
		function showRejectModal() {
			document.getElementById('rejectModal').classList.add('active');
		}

		// Close reject modal
		function closeRejectModal() {
			document.getElementById('rejectModal').classList.remove('active');
			document.getElementById('rejectReason').value = '';
		}

		// Submit reject
		async function submitReject() {
			const reason = document.getElementById('rejectReason').value.trim();
			if (!reason) {
				alert('Vui lòng nhập lý do từ chối!');
				return;
			}

			if (!confirm('Bạn có chắc chắn muốn từ chối báo giá này?')) return;

			try {
				const response = await fetch(`/Stores/Quotations/Reject/${quotationId}`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						reason: reason
					})
				});

				if (response.ok) {
					alert('✅ Đã từ chối báo giá!');
					location.reload();
				} else {
					alert('❌ Không thể từ chối báo giá!');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('Có lỗi xảy ra!');
			}
		}
		document.addEventListener('DOMContentLoaded', async () => {
			await generateContracts('@Model.Quotation.Id');
		});
		async function generateContracts(quotationId) {
			if (!quotationId) {
				alert('Thiếu ID báo giá!. Không thể tải danh sách hợp đồng');
				return;
			}

			try {
				const response = await fetch(`/Stores/Quotations/Contracts?quotationId=${quotationId}`, {
					method: 'POST',
					headers: {'Content-Type': 'application/json'}
				});

				if (!response.ok) {
					alert('❌ Không thể tạo hợp đồng!');
					return;
				}

				const contracts = await response.json();
				const container = document.getElementById('contractsContainer');
				container.innerHTML = '';

				if (!contracts || contracts.length === 0) {
					container.innerHTML = '<p>Không có hợp đồng nào được tạo.</p>';
					return;
				}

				contracts.forEach(c => {
					const div = document.createElement('div');
					div.classList.add('info-row');
					div.innerHTML = `
				<span class="info-value">${c.warehouseSlot?.code || 'Chưa có mã kho'}</span>
				<button class="view-link" onclick="viewContract('${c.id}')">Xem hợp đồng</button>
			`;
					container.appendChild(div);
				});

				alert('✅ Đã tạo hợp đồng thành công!');
			} catch (error) {
				console.error('Error:', error);
				alert('Có lỗi xảy ra khi tạo hợp đồng!');
			}
		}
		
		async function viewContract(contractId) {
			window.open(`/Stores/Quotations/Contracts/${contractId}`, '_blank');
		}

	</script>
}