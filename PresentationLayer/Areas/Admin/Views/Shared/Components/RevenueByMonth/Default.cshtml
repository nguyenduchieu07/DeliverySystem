@model System.Collections.Generic.Dictionary<string, decimal>

<style>
    .text-primary {
        color: #e5501b !important;
    }

    .chart-area {
        position: relative;
        height: 20rem;
    }

    @@media (min-width: 768px) {
    .chart-area {
        height: 25rem;
    }
    }
</style>

<div class="col-xl-8 col-lg-7">
    <!-- Area Chart -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">📊 Doanh số theo tháng</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
                   data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                     aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">Tùy chọn:</div>
                    <a class="dropdown-item" href="#">Xem chi tiết</a>
                    <a class="dropdown-item" href="#">Xuất báo cáo</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="chart-area">
                <canvas id="myAreaChart"></canvas>
            </div>
            <div class="mt-4 text-center small">
                <span class="mr-2">
                    <i class="fas fa-circle" style="color: #e5501b;"></i> Doanh số
                </span>
            </div>
        </div>
    </div>
</div>

<!-- Page level plugins -->
<script src="~/vendor/chart.js/Chart.min.js"></script>

<script>
    // Lấy dữ liệu từ model C#
    const labels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Keys));
    const values = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Values));

    // Thiết lập font giống Bootstrap
    Chart.defaults.global.defaultFontFamily =
        'Nunito,-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
    Chart.defaults.global.defaultFontColor = '#858796';

    // Hàm định dạng số (thêm dấu phẩy)
    function number_format(number, decimals, dec_point, thousands_sep) {
        number = (number + '').replace(',', '').replace(' ', '');
        var n = !isFinite(+number) ? 0 : +number,
            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
            sep = thousands_sep === undefined ? ',' : thousands_sep,
            dec = dec_point === undefined ? '.' : dec_point,
            s = '',
            toFixedFix = function (n, prec) {
                var k = Math.pow(10, prec);
                return '' + Math.round(n * k) / k;
            };
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    }

    // Orange theme colors
    const orangePrimary = 'rgba(229, 80, 27, 1)';      // #e5501b
    const orangeLight = 'rgba(229, 80, 27, 0.05)';
    const orangeSecondary = 'rgba(210, 108, 69, 1)';   // #d26c45

    // Tạo gradient
    const ctx = document.getElementById("myAreaChart");
    const gradient = ctx.getContext('2d').createLinearGradient(0, 0, 0, 400);
    gradient.addColorStop(0, 'rgba(229, 80, 27, 0.2)');
    gradient.addColorStop(1, 'rgba(229, 80, 27, 0.01)');

    // Tạo biểu đồ
    const myLineChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: "Doanh số (VNĐ)",
                lineTension: 0.3,
                backgroundColor: gradient,
                borderColor: orangePrimary,
                pointRadius: 4,
                pointBackgroundColor: orangePrimary,
                pointBorderColor: "#fff",
                pointHoverRadius: 6,
                pointHoverBackgroundColor: orangePrimary,
                pointHoverBorderColor: "#fff",
                pointHitRadius: 10,
                pointBorderWidth: 2,
                data: values,
            }],
        },
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: { left: 10, right: 25, top: 25, bottom: 0 }
            },
            scales: {
                xAxes: [{
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    ticks: {
                        maxTicksLimit: 12,
                        fontColor: '#858796',
                        fontSize: 12
                    }
                }],
                yAxes: [{
                    ticks: {
                        maxTicksLimit: 6,
                        padding: 10,
                        fontColor: '#858796',
                        fontSize: 12,
                        callback: function (value) {
                            // Format theo VNĐ
                            if (value >= 1000000) {
                                return (value / 1000000).toFixed(1) + 'M ₫';
                            } else if (value >= 1000) {
                                return (value / 1000).toFixed(1) + 'K ₫';
                            }
                            return number_format(value) + ' ₫';
                        }
                    },
                    gridLines: {
                        color: "rgb(234, 236, 244)",
                        zeroLineColor: "rgb(234, 236, 244)",
                        drawBorder: false,
                        borderDash: [2],
                        zeroLineBorderDash: [2]
                    }
                }]
            },
            legend: { display: false },
            tooltips: {
                backgroundColor: "rgb(255,255,255)",
                bodyFontColor: "#858796",
                titleMarginBottom: 10,
                titleFontColor: '#6e707e',
                titleFontSize: 14,
                borderColor: '#e5501b',
                borderWidth: 2,
                xPadding: 15,
                yPadding: 15,
                displayColors: false,
                intersect: false,
                mode: 'index',
                caretPadding: 10,
                callbacks: {
                    label: function (tooltipItem, chart) {
                        const value = tooltipItem.yLabel || 0;
                        return 'Doanh số: ' + number_format(value) + ' ₫';
                    }
                }
            },
            animation: {
                duration: 1500,
                easing: 'easeInOutQuart'
            }
        }
    });
</script>