@using DataAccessLayer.Constants
@using DataAccessLayer.Enums
@model PresentationLayer.Models.AdminStoreDetailViewModel
@{
	ViewBag.Title = "Chi tiết cửa hàng";
	var demo = Model.Store.Warehouses;
}

<style>
	:root {
		--primary: #e5501b;
		--success: #1cc88a;
		--warning: #f6c23e;
		--danger: #e74a3b;
		--text: #5a5c69;
		--border: #e3e6f0;
		--white: #ffffff;
		--gray: #858796;
		--shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
	}

	/* Page Header */
	.page-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1.5rem;
		flex-wrap: wrap;
		gap: 1rem;
	}

		.page-header h1 {
			font-size: 1.75rem;
			font-weight: 400;
			color: var(--text);
			margin: 0;
			display: flex;
			align-items: center;
			gap: 0.5rem;
		}

			.page-header h1 i {
				color: var(--primary);
			}

	/* Back Button */
	.btn-back {
		display: inline-flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 1rem;
		background: var(--white);
		border: 1px solid var(--border);
		border-radius: 0.35rem;
		color: var(--text);
		text-decoration: none;
		font-size: 0.875rem;
		transition: all 0.15s ease-in-out;
	}

		.btn-back:hover {
			background: var(#f8f9fc);
			border-color: var(--primary);
			color: var(--primary);
			transform: translateY(-1px);
			box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
		}

		.btn-back::before {
			content: '\f060';
			font-family: 'Font Awesome 5 Free';
			font-weight: 900;
		}

	/* Card Styles */
	.card {
		background: var(--white);
		border: 1px solid var(--border);
		border-radius: 0.35rem;
		box-shadow: var(--shadow);
		margin-bottom: 1.25rem;
		transition: all 0.15s ease-in-out;
	}

		.card:hover {
			box-shadow: 0 0.5rem 2rem 0 rgba(58, 59, 69, 0.2);
		}

	.card-header {
		background: linear-gradient(180deg, var(--primary) 0%, var(#d26c45) 100%);
		padding: 0.75rem 1.25rem;
		border-bottom: none;
		border-radius: 0.35rem 0.35rem 0 0;
		font-size: 1rem;
		font-weight: 700;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.card-body {
		padding: 1.25rem;
	}

	/* Detail Grid */
	.detail-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
		gap: 1.5rem;
	}

	.detail-item {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.detail-label {
		font-size: 0.7rem;
		font-weight: 700;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		color: var(--gray);
	}

	.detail-value {
		font-size: 0.875rem;
		color: var(--text);
		font-weight: 600;
		display: flex;
		align-items: center;
		gap: 0.5rem;
		flex-wrap: wrap;
	}

	/* Badges */
	.badge {
		display: inline-block;
		padding: 0.375rem 0.875rem;
		border-radius: 10rem;
		font-size: 0.7rem;
		font-weight: 700;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		white-space: nowrap;
	}

	.badge-active {
		background: var(--success);
		color: var(--white);
	}

	.badge-inactive {
		background: var(--gray);
		color: var(--white);
	}

	.badge-pending {
		background: var(--warning);
		color: var(--white);
	}

	.badge-kyc {
		background: var(--primary);
		color: var(--white);
	}

	/* Verification Icon */
	.verified-icon {
		font-size: 1.5rem;
	}

	.verified-yes {
		color: var(--success);
	}

	.verified-no {
		color: var(--danger);
	}

	/* Rating Stars */
	.rating-stars {
		color: var(--warning);
		font-size: 1rem;
	}

		.rating-stars i {
			margin-right: 0.125rem;
		}

	/* Links */
	.detail-value a {
		color: var(--primary);
		text-decoration: none;
		transition: all 0.15s ease-in-out;
		font-weight: 600;
	}

		.detail-value a:hover {
			color: var(#d26c45);
			text-decoration: underline;
		}

	.text-muted {
		color: var(--gray);
		font-style: italic;
	}

	/* Action Buttons */
	.action-buttons {
		display: flex;
		gap: 0.75rem;
		flex-wrap: wrap;
		margin-top: 1.5rem;
		padding-top: 1.5rem;
		border-top: 1px solid var(--border);
	}

	.btn {
		display: inline-flex;
		align-items: center;
		gap: 0.375rem;
		padding: 0.5rem 1rem;
		border: none;
		border-radius: 0.35rem;
		font-size: 0.875rem;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.15s ease-in-out;
		text-decoration: none;
	}

	.btn-primary {
		background: var(--primary);
		color: var(--white);
	}

		.btn-primary:hover {
			background: var(#d26c45);
			transform: translateY(-1px);
		}

	.btn-success {
		background: var(--success);
		color: var(--white);
	}

		.btn-success:hover {
			background: #17a673;
			transform: translateY(-1px);
		}

	.btn-danger {
		background: var(--danger);
		color: var(--white);
	}

		.btn-danger:hover {
			background: #c23321;
			transform: translateY(-1px);
		}

	.btn-outline {
		background: var(--white);
		border: 1px solid var(--border);
		color: var(--text);
	}

		.btn-outline:hover {
			background: var(#f8f9fc);
			border-color: var(--primary);
			color: var(--primary);
		}

	/* Info Box */
	.info-box {
		background: var(#f8f9fc);
		border-left: 4px solid var(--primary);
		padding: 1rem;
		border-radius: 0.35rem;
		margin-top: 1rem;
	}

	.info-box-title {
		font-weight: 700;
		color: var(--text);
		margin-bottom: 0.5rem;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.info-box-content {
		color: var(--gray);
		font-size: 0.875rem;
		line-height: 1.6;
	}

	/* Responsive */
	@@media (max-width: 768px) {
		.page-header {
			flex-direction: column;
			align-items: flex-start;
		}

		.detail-grid {
			grid-template-columns: 1fr;
		}

		.action-buttons {
			flex-direction: column;
		}

		.btn {
			width: 100%;
			justify-content: center;
		}
	}

	/* Map Link Styling */
	.map-link {
		display: inline-flex;
		align-items: center;
		gap: 0.25rem;
		padding: 0.375rem 0.75rem;
		background: var(#f8f9fc);
		border: 1px solid var(--border);
		border-radius: 0.35rem;
		color: var(--primary);
		text-decoration: none;
		font-weight: 600;
		transition: all 0.15s ease-in-out;
	}

		.map-link:hover {
			background: var(--primary);
			border-color: var(--primary);
			color: var(--white);
			transform: translateY(-1px);
		}

	/* Stats Overview */
	.stats-mini {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
		gap: 1rem;
		margin-bottom: 1.5rem;
	}

	.stat-mini-card {
		background: var(--white);
		border: 1px solid var(--border);
		border-radius: 0.35rem;
		padding: 1rem;
		text-align: center;
		transition: all 0.15s ease-in-out;
	}

		.stat-mini-card:hover {
			transform: translateY(-2px);
			box-shadow: var(--shadow);
		}

	.stat-mini-icon {
		font-size: 1.5rem;
		color: var(--primary);
		margin-bottom: 0.5rem;
	}

	.stat-mini-label {
		font-size: 0.7rem;
		text-transform: uppercase;
		color: var(--gray);
		letter-spacing: 0.5px;
		font-weight: 700;
	}

	.stat-mini-value {
		font-size: 1.25rem;
		font-weight: 700;
		color: var(--text);
		margin-top: 0.25rem;
	}

	.doc-checklist {
		display: flex;
		flex-direction: column;
		gap: 6px;
	}

	.doc-item {
		display: flex;
		align-items: center;
		gap: 8px;
	}

		.doc-item label {
			font-weight: 600;
		}

		.doc-item .desc {
			font-size: 0.85em;
			color: #666;
		}

		.doc-item .view-link {
			margin-left: auto;
			color: #007bff;
			text-decoration: none;
		}

		.doc-item .missing {
			color: #c0392b;
			margin-left: auto;
		}

</style>

<div class="page-header">
	<h1>Chi Tiết Cửa Hàng</h1>
	<div>
		<a id="btnEditStore" data-id="@Model.Store.Id" class="btn btn-primary">
			<i class="fas fa-edit"></i> Chỉnh sửa thông tin
		</a>
		<a asp-area="Admin" asp-controller="Store" asp-action="Index" class="btn-back">
			Quay lại danh sách
		</a>
	</div>
</div>

<!-- Quick Stats -->
<div class="stats-mini">
	@* <div class="stat-mini-card">
		<div class="stat-mini-icon">
			@if (Model.Store.IsVerified)
			{
				<i class="fas fa-check-circle" style="color: var(--success);"></i>
			}
			else
			{
				<i class="fas fa-times-circle" style="color: var(--danger);"></i>
			}
		</div>
		<div class="stat-mini-label">Trạng thái xác minh</div>
		<div class="stat-mini-value">@(Model.Store.IsVerified ? "Đã xác minh" : "Chưa xác minh")</div>
	</div> *@
	<div class="stat-mini-card">
		<div class="stat-mini-icon"><i class="fas fa-star"></i></div>
		<div class="stat-mini-label">Điểm đánh giá</div>
		<div class="stat-mini-value">@($"{Model.Store.RatingAvg:F1}") / 5</div>
	</div>
	<div class="stat-mini-card">
		<div class="stat-mini-icon"><i class="fas fa-comments"></i></div>
		<div class="stat-mini-label">Số đánh giá</div>
		<div class="stat-mini-value">@Model.ReviewCount</div>
	</div>
	<div class="stat-mini-card">
		<div class="stat-mini-icon"><i class="fas fa-shield-alt"></i></div>
		<div class="stat-mini-label">KYC Level</div>
		<div class="stat-mini-value">@(Model.Store.KycLevel ?? "N/A")</div>
	</div>
</div>

<!-- Tổng quan -->
<div class="card">
	<div class="card-header"><i class="fas fa-info-circle"></i> Thông Tin Tổng Quan</div>
	<div class="card-body">
		<div class="detail-grid">
			<div class="detail-item">
				<div class="detail-label">Tên cửa hàng</div>
				<div class="detail-value">@Model.Store.StoreName</div>
			</div>
			<div class="detail-item">
				<div class="detail-label">Trạng thái</div>
				<div class="detail-value">
					@if (Model.Store.Status == StatusValue.Active)
					{
						<span class="badge badge-active">Hoạt động</span>
					}
					else if (Model.Store.Status == StatusValue.Pending)
					{
						<span class="badge badge-pending">Chờ duyệt</span>
					}
					else if (Model.Store.Status == StatusValue.InActive)
					{
						<span class="badge badge-pending">Không hoạt động</span>
					}
					else
					{
						<span class="badge badge-inactive">Không rõ</span>
					}
				</div>
			</div>
			<div class="detail-item">
				<div class="detail-label">KYC Level</div>
				<div class="detail-value"><span class="badge badge-kyc">@Model.Store.KycLevel</span></div>
			</div>
			@* <div class="detail-item">
				<div class="detail-label">Đã xác minh</div>
				<div class="detail-value">
					@if (Model.Store.IsVerified)
					{
						<i class="fas fa-check-circle verified-icon verified-yes"></i>
						<span style="color: var(--success); font-weight: 600;">Đã xác minh</span>
					}
					else
					{
						<i class="fas fa-times-circle verified-icon verified-no"></i>
						<span style="color: var(--danger); font-weight: 600;">Chưa xác minh</span>
					}
				</div>
			</div> *@
		</div>
	</div>
</div>

<!-- Thông tin pháp lý & liên hệ -->
<div class="card">
	<div class="card-header"><i class="fas fa-id-card"></i> Thông Tin Pháp Lý & Liên Hệ</div>
	<div class="card-body">
		<div class="detail-grid">
			<div class="detail-item">
				<div class="detail-label">Tên pháp lý</div>
				<div class="detail-value">@(Model.Store.LegalName ?? "N/A")</div>
			</div>
			<div class="detail-item">
				<div class="detail-label">Mã số thuế</div>
				<div class="detail-value">@(Model.Store.TaxNumber ?? "N/A")</div>
			</div>
			<div class="detail-item">
				<div class="detail-label">Số điện thoại</div>
				<div class="detail-value">
					@if (!string.IsNullOrEmpty(Model.Store.ContactPhone))
					{
						<i class="fas fa-phone" style="color: var(#e5501b);"></i>
						<a href="tel:@Model.Store.ContactPhone">@Model.Store.ContactPhone</a>
					}
					else
					{
						<span class="text-muted">N/A</span>
					}
				</div>
			</div>
			<div class="detail-item">
				<div class="detail-label">Email</div>
				<div class="detail-value">
					@if (!string.IsNullOrEmpty(Model.Store.ContactEmail))
					{
						<i class="fas fa-envelope" style="color: var(#e5501b);"></i>
						<a href="mailto:@Model.Store.ContactEmail">@Model.Store.ContactEmail</a>
					}
					else
					{
						<span class="text-muted">N/A</span>
					}
				</div>
			</div>
			<div class="detail-item">
				<div class="detail-label">Ngày hết hạn giấy phép</div>
				<div class="detail-value">
					@if (Model.Store.LicenseExpiryDate.HasValue)
					{
						var daysUntilExpiry = (Model.Store.LicenseExpiryDate.Value - DateTime.Now).Days;
						if (daysUntilExpiry < 0)
						{
							<i class="fas fa-exclamation-triangle" style="color: var(--danger);"></i>
							<span style="color: var(--danger); font-weight: 700;">
								@Model.Store.LicenseExpiryDate?.ToString("dd/MM/yyyy") (Đã hết hạn)
							</span>
						}
						else if (daysUntilExpiry < 30)
						{
							<i class="fas fa-exclamation-circle" style="color: var(--danger);"></i>
							<span style="color: var(--danger); font-weight: 600;">
								@Model.Store.LicenseExpiryDate?.ToString("dd/MM/yyyy") (Còn @daysUntilExpiry ngày)
							</span>
						}
						else if (daysUntilExpiry < 90)
						{
							<i class="fas fa-clock" style="color: var(--warning);"></i>
							<span style="color: var(--warning); font-weight: 600;">
								@Model.Store.LicenseExpiryDate?.ToString("dd/MM/yyyy") (Còn @daysUntilExpiry ngày)
							</span>
						}
						else
						{
							<i class="fas fa-calendar-check" style="color: var(--success);"></i>
							@Model.Store.LicenseExpiryDate?.ToString("dd/MM/yyyy")
						}
					}
					else
					{
						<span class="text-muted">N/A</span>
					}
				</div>
			</div>
		</div>

		@if (Model.Store.LicenseExpiryDate.HasValue)
		{
			var daysUntilExpiry = (Model.Store.LicenseExpiryDate.Value - DateTime.Now).Days;
			if (daysUntilExpiry < 30)
			{
				<div class="info-box" style="border-left-color: var(--danger); background: #ffe5e5;">
					<div class="info-box-title" style="color: var(--danger);">
						<i class="fas fa-exclamation-triangle"></i>
						Cảnh báo giấy phép
					</div>
					<div class="info-box-content" style="color: var(--danger);">
						Giấy phép kinh doanh sắp hết hạn. Vui lòng liên hệ với cửa hàng để gia hạn.
					</div>
				</div>
			}
		}
	</div>
</div>

<!-- Đánh giá & vị trí -->
<div class="card">
	<div class="card-header"><i class="fas fa-star"></i> Đánh Giá & Vị Trí</div>
	<div class="card-body">
		<div class="detail-grid">
			<div class="detail-item">
				<div class="detail-label">Điểm đánh giá</div>
				<div class="detail-value">
					<div class="rating-stars">
						@for (int i = 1; i <= 5; i++)
						{
							if (i <= Math.Floor(Model.Store.RatingAvg))
							{
								<i class="fas fa-star"></i>
							}
							else if (i - 0.5 <= (double)Model.Store.RatingAvg)
							{
								<i class="fas fa-star-half-alt"></i>
							}
							else
							{
								<i class="far fa-star"></i>
							}
						}
					</div>
					<span>@($"{Model.Store.RatingAvg:F1}") / 5 (@Model.ReviewCount lượt)</span>
					<a asp-area="Admin" asp-controller="Store" asp-action="GetFeedbacksByStore" asp-route-storeId="@Model.Store.Id" style="margin-left: 0.5rem;">Xem đánh giá <i class="fas fa-chevron-right"></i></a>
				</div>
			</div>

			<div class="detail-item">
				<div class="detail-label">Vị trí cửa hàng</div>
				<div class="detail-value">
					@if (Model.Store.Latitude.HasValue && Model.Store.Longitude.HasValue)
					{
						<a href="https://www.google.com/maps?q=@Model.Store.Latitude,@Model.Store.Longitude" target="_blank" class="map-link">
							<i class="fas fa-map-marker-alt"></i>
							Xem trên Google Maps
						</a>
					}
					else
					{
						<span class="text-muted">Không có dữ liệu vị trí</span>
					}
				</div>
			</div>
		</div>

		<!-- Action Buttons -->
		@* <div class="action-buttons"> *@
		@*      *@
		@*     <button type="button" class="btn btn-outline"> *@
		@*         <i class="fas fa-history"></i> Xem lịch sử hoạt động *@
		@*     </button> *@
		@*     <button type="button" class="btn btn-outline"> *@
		@*         <i class="fas fa-file-alt"></i> Xuất báo cáo *@
		@*     </button> *@
		@* </div> *@
	</div>
</div>

<style>
	:root {
		--success: #1cc88a;
		--warning: #f6c23e;
		--danger: #e74a3b;
		--info: #36b9cc;
		--text: #5a5c69;
		--border: #e3e6f0;
		--white: #ffffff;
		--shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
	}

	/* Card Styles */
	.card {
		background: var(--white);
		border: 1px solid var(--border);
		border-radius: 0.35rem;
		box-shadow: var(--shadow);
		margin-top: 1.25rem;
		transition: all 0.15s ease-in-out;
	}

		.card:hover {
			box-shadow: 0 0.5rem 2rem 0 rgba(58, 59, 69, 0.2);
		}

	.card-header {
		background: linear-gradient(180deg, var(#e5501b) 0%, var( #d26c45) 100%);
		padding: 0.75rem 1.25rem;
		border-bottom: none;
		border-radius: 0.35rem 0.35rem 0 0;
		font-size: 1rem;
		font-weight: 700;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.card-body {
		padding: 1.25rem;
	}

	/* Detail Grid */
	.detail-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
		gap: 1.5rem;
		margin-bottom: 1.5rem;
	}

	.detail-item {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.detail-label {
		font-size: 0.7rem;
		font-weight: 700;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		color: var(#858796);
	}

	.detail-value {
		font-size: 0.875rem;
		color: var(--text);
		font-weight: 600;
	}

	/* Status Badges */
	.status-badge {
		display: inline-flex;
		align-items: center;
		gap: 0.375rem;
		padding: 0.375rem 0.875rem;
		border-radius: 10rem;
		font-size: 0.75rem;
		font-weight: 700;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.status-pending {
		background: rgba(246, 194, 62, 0.15);
		color: var(--warning);
		border: 1px solid var(--warning);
	}

	.status-approved {
		background: rgba(28, 200, 138, 0.15);
		color: var(--success);
		border: 1px solid var(--success);
	}

	.status-rejected {
		background: rgba(231, 74, 59, 0.15);
		color: var(--danger);
		border: 1px solid var(--danger);
	}

	.status-changes {
		background: rgba(54, 185, 204, 0.15);
		color: var(--info);
		border: 1px solid var(--info);
	}

	/* Empty State */
	.empty-kyc {
		text-align: center;
		padding: 2rem 1rem;
		background: var(#f8f9fc);
		border-radius: 0.35rem;
		border: 2px dashed var(--border);
	}

		.empty-kyc i {
			font-size: 3rem;
			color: var(#858796);
			opacity: 0.3;
			margin-bottom: 1rem;
		}

		.empty-kyc p {
			color: var(#858796);
			font-size: 0.875rem;
			margin: 0;
		}

	/* Section Divider */
	hr {
		border: 0;
		border-top: 1px solid var(--border);
		margin: 1.5rem 0;
	}

	/* Section Title */
	h6 {
		font-size: 0.875rem;
		font-weight: 700;
		color: var(--text);
		margin-bottom: 1rem;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

		h6 i {
			color: var(#e5501b);
		}

	/* Document Checklist */
	.doc-checklist {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}

	.doc-item {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		padding: 0.875rem 1rem;
		background: var(#f8f9fc);
		border: 1px solid var(--border);
		border-radius: 0.35rem;
		transition: all 0.15s ease-in-out;
	}

		.doc-item:hover {
			background: var(--white);
			border-color: var(#e5501b);
			box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
		}

		.doc-item input[type="checkbox"] {
			width: 1.125rem;
			height: 1.125rem;
			cursor: default;
			accent-color: var(--success);
		}

		.doc-item label {
			font-weight: 700;
			color: var(--text);
			font-size: 0.875rem;
			margin: 0;
			flex-shrink: 0;
		}

		.doc-item .desc {
			color: var(#858796);
			font-size: 0.75rem;
			font-style: italic;
			flex-grow: 1;
		}

		.doc-item .view-link {
			color: var(#e5501b);
			text-decoration: none;
			font-weight: 600;
			font-size: 0.875rem;
			transition: all 0.15s ease-in-out;
			display: inline-flex;
			align-items: center;
			gap: 0.25rem;
			padding: 0.25rem 0.75rem;
			background: var(--white);
			border: 1px solid var(#e5501b);
			border-radius: 0.35rem;
		}

		/*.doc-item .view-link:hover {*/
		/*    background: var(#e5501b);*/
		/*    color: var(--white);*/
		/*    transform: translateY(-1px);*/
		/*    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);*/
		/*}*/

		.doc-item .missing {
			font-size: 1.25rem;
			color: var(--danger);
		}

	/* Admin Note Box */
	.admin-note-box {
		background: rgba(229, 80, 27, 0.05);
		border-left: 4px solid var(#e5501b);
		padding: 1rem;
		border-radius: 0.35rem;
		margin-top: 1rem;
	}

		.admin-note-box .detail-label {
			color: var(#e5501b);
			margin-bottom: 0.5rem;
		}

		.admin-note-box .detail-value {
			color: var(--text);
			font-weight: 400;
			line-height: 1.6;
			font-style: italic;
		}

	/* Buttons */
	.btn {
		display: inline-flex;
		align-items: center;
		gap: 0.375rem;
		padding: 0.5rem 1rem;
		border: none;
		border-radius: 0.35rem;
		font-size: 0.875rem;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.15s ease-in-out;
		text-decoration: none;
		margin-top: 1rem;
	}

	.btn-success {
		background: var(--success);
		color: var(--white);
	}

		.btn-success:hover {
			background: #17a673;
			transform: translateY(-1px);
			box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
		}

	.btn-danger {
		background: var(--danger);
		color: var(--white);
	}

		.btn-danger:hover {
			background: #c23321;
			transform: translateY(-1px);
			box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
		}

	.btn-warning {
		background: var(--warning);
		color: var(--white);
	}

		.btn-warning:hover {
			background: #dda20a;
			transform: translateY(-1px);
		}

	.btn-outline {
		background: var(--white);
		border: 1px solid var(--border);
		color: var(--text);
	}

		.btn-outline:hover {
			background: var(#f8f9fc);
			border-color: var(#e5501b);
			color: var(#e5501b);
		}

	/* Action Buttons Group */
	.action-buttons-group {
		display: flex;
		gap: 0.75rem;
		flex-wrap: wrap;
		margin-top: 1.5rem;
		padding-top: 1.5rem;
		border-top: 1px solid var(--border);
	}

	/* KYC Timeline */
	.kyc-timeline {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 1rem;
		background: var(#f8f9fc);
		border-radius: 0.35rem;
		margin-bottom: 1.5rem;
	}

	.timeline-step {
		display: flex;
		align-items: center;
		gap: 0.375rem;
		font-size: 0.75rem;
		color: var(#858796);
	}

		.timeline-step.active {
			color: var(#e5501b);
			font-weight: 700;
		}

		.timeline-step i {
			font-size: 1rem;
		}

	.timeline-arrow {
		color: var(--border);
		margin: 0 0.25rem;
	}

	/* Responsive */
	@@media (max-width: 768px) {
		.detail-grid {
			grid-template-columns: 1fr;
		}

		.doc-item {
			flex-wrap: wrap;
		}

			.doc-item label {
				flex-basis: 100%;
			}

		.action-buttons-group {
			flex-direction: column;
		}

		.btn {
			width: 100%;
			justify-content: center;
		}
	}
	/* Base badge style */
	.badge {
		display: inline-block;
		padding: 0.35rem 0.6rem;
		border-radius: 0.5rem;
		font-size: 0.85rem;
		font-weight: 600;
		text-align: center;
		line-height: 1;
		color: #fff;
		user-select: none;
		transition: all 0.2s ease-in-out;
	}

	/* Status variations */
	.badge.success {
		background-color: #28a745; /* xanh lá */
		box-shadow: 0 0 6px rgba(40, 167, 69, 0.3);
	}

	.badge.danger {
		background-color: #dc3545; /* đỏ */
		box-shadow: 0 0 6px rgba(220, 53, 69, 0.3);
	}

	.badge.warn {
		background-color: #ffc107; /* vàng */
		color: #212529;
		box-shadow: 0 0 6px rgba(255, 193, 7, 0.3);
	}

</style>

<div class="card mt-4">
	<div class="card-header"><i class="fas fa-id-card"></i> Danh sách kho</div>
	<div class="card-body">
		<table id="storeDataTable" class="display" style="width:100%">
			<thead>
			<tr>
				<th>Ảnh kho</th>
				<th>Tên kho</th>
				<th>Địa chỉ</th>
				<th style="width:12%;">Diện tích (C×D×R)</th>
				<th>Slots</th>
			@* 	<th>Trạng thái</th> *@
				<th>Ngày tạo</th>
			</tr>
			</thead>
			<tbody>
				@if (Model.Store.Warehouses.Count == 0)
				{
					<tr><td colspan="8" class="muted">Không có kho.</td></tr>
				}
				else
				{
					foreach (var w in Model.Store.Warehouses)
					{
						<tr>
							<td>
								@if (!string.IsNullOrWhiteSpace(w.CoverImageUrl))
								{
									<img src="@(w.CoverImageUrl)" alt="cover"
										 style="width:64px;height:48px;object-fit:cover;border-radius:8px;border:1px solid var(--border);" />
								}
								else
								{
									<img src="@($"https://api.dicebear.com/7.x/initials/svg?seed={(w.Name)}&radius=50")" ) alt="cover"
										 style="width:64px;height:48px;object-fit:cover;border-radius:8px;border:1px solid var(--border);" />
								}
							</td>
							<td>@w.Name</td>
							<td>@(w.Address?.AddressLine?? "N/A")</td>
							<td>
								@if (w.HeightM > 0 && w.LengthM > 0 && w.WidthM > 0)
								{
									<div class="muted">@(Math.Round(w.HeightM * w.LengthM * w.WidthM, 3)) m³</div>
									<div style="font-size:12px;">@w.HeightM × @w.LengthM × @w.WidthM</div>
									
								}
								else
								{

									<span class="muted">—</span>
								}
							</td>
							<td><span class="badge" style="color: #858796">@(Model.WarehouseSlotCount[w.Id])</span></td>
							@* <td>
								@{
									var status = w.Status.ToDisplayStringForWarehouse() ?? "Pending";
									string badgeClass =  w.Status switch
									{
										StatusValue.Approved => "badge success",
										StatusValue.Rejected => "badge danger",
										StatusValue.Pending => "badge warn",
										_ => "badge"
									};
								}
								<span class="@badgeClass">@status</span>
							</td> *@
							<td>@w.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
							<td>
								<a class="btn" asp-area="Admin" asp-controller="Store" asp-action="GetWarehouseDetail" asp-route-id="@w.Id">Xem chi tết</a>
								@* @if (w.Status == StatusValue.Approved) *@
								@* { *@
								@* 	<a class="btn" asp-controller="Warehouse" asp-action="Edit" asp-route-id="@w.Id">Edit</a> *@
								@* } *@
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>

</div>

<div class="card mt-4">
	<div class="card-header"><i class="fas fa-id-card"></i> Hồ Sơ KYC</div>
	<div class="card-body">
		@if (Model.KycSubmission == null)
		{
			<div class="empty-kyc">
				<i class="fas fa-folder-open"></i>
				<p>Chưa có hồ sơ KYC nào được gửi. Vui lòng yêu cầu cửa hàng hoàn tất quy trình xác minh.</p>
			</div>
		}
		else
		{
			<!-- KYC Timeline -->
			@* <div class="kyc-timeline"> *@
			@*     <div class="timeline-step @(Model.KycSubmission.Status != DataAccessLayer.Enums.KycStatus.Pending ? "active" : "")"> *@
			@*         <i class="fas fa-upload"></i> *@
			@*         <span>Đã gửi</span> *@
			@*     </div> *@
			@*     <i class="fas fa-chevron-right timeline-arrow"></i> *@
			@*     <div class="timeline-step @(Model.KycSubmission.ReviewedAt.HasValue ? "active" : "")"> *@
			@*         <i class="fas fa-search"></i> *@
			@*         <span>Đang xét duyệt</span> *@
			@*     </div> *@
			@*     <i class="fas fa-chevron-right timeline-arrow"></i> *@
			@*     <div class="timeline-step @(Model.KycSubmission.Status == DataAccessLayer.Enums.KycStatus.Approved ? "active" : "")"> *@
			@*         <i class="fas fa-check-circle"></i> *@
			@*         <span>Hoàn tất</span> *@
			@*     </div> *@
			@* </div> *@

			<!-- KYC Status Info -->
			<div class="detail-grid">
				<div class="detail-item">
					<div class="detail-label">Trạng thái hồ sơ</div>
					<div class="detail-value">
						@{
							var statusClass = Model.KycSubmission.Status switch
							{
								DataAccessLayer.Enums.KycStatus.Pending => "status-pending",
								DataAccessLayer.Enums.KycStatus.NeedChanges => "status-changes",
								DataAccessLayer.Enums.KycStatus.Approved => "status-approved",
								DataAccessLayer.Enums.KycStatus.Rejected => "status-rejected",
								_ => ""
							};

							var statusIcon = Model.KycSubmission.Status switch
							{
								DataAccessLayer.Enums.KycStatus.Pending => "fa-clock",
								DataAccessLayer.Enums.KycStatus.NeedChanges => "fa-edit",
								DataAccessLayer.Enums.KycStatus.Approved => "fa-check-circle",
								DataAccessLayer.Enums.KycStatus.Rejected => "fa-times-circle",
								_ => "fa-question-circle"
							};
						}
						<span class="status-badge @statusClass">
							<i class="fas @statusIcon"></i>
							@Model.KycSubmission.Status.ToDisplayStringForKycStatus()
						</span>
					</div>
				</div>

				<div class="detail-item">
					<div class="detail-label">Ngày gửi hồ sơ</div>
					<div class="detail-value">
						<i class="far fa-calendar-alt" style="color: var(#e5501b); margin-right: 0.25rem;"></i>
						@Model.KycSubmission.SubmittedAt.ToString("dd/MM/yyyy HH:mm")
					</div>
				</div>

				@if (Model.KycSubmission.ReviewedAt.HasValue)
				{
					<div class="detail-item">
						<div class="detail-label">Ngày xét duyệt</div>
						<div class="detail-value">
							<i class="far fa-calendar-check" style="color: var(--success); margin-right: 0.25rem;"></i>
							@Model.KycSubmission.ReviewedAt?.ToString("dd/MM/yyyy HH:mm")
						</div>
					</div>
				}

				<div class="detail-item">
					<div class="detail-label">Tổng số tài liệu</div>
					<div class="detail-value">
						<i class="fas fa-file-alt" style="color: var(#e5501b); margin-right: 0.25rem;"></i>
						@Model.KycSubmission.Documents.Count / @KycDocumentConstant.Types.Count tài liệu
					</div>
				</div>
			</div>

			@if (!string.IsNullOrEmpty(Model.KycSubmission.AdminNote))
			{
				<div class="admin-note-box">
					<div class="detail-label">
						<i class="fas fa-comment-dots"></i> Ghi chú của quản trị viên
					</div>
					<div class="detail-value">@Model.KycSubmission.AdminNote</div>
				</div>
			}

			<hr />

			<!-- Document List -->
			<h6><i class="fas fa-file-alt"></i> Danh Sách Tài Liệu KYC</h6>
			<div class="doc-checklist mt-3">
				@foreach (var doc in KycDocumentConstant.Types)
				{
					var hasFile = Model.KycSubmission.Documents.Any(d => d.DocType == doc.Key);
					<div class="doc-item">
						<input type="checkbox" disabled @(hasFile ? "checked" : "") />
						<label>@doc.Key</label>
						<span class="desc">(@doc.Value.Description)</span>

						@if (hasFile)
						{
							var file = Model.KycSubmission.Documents.First(d => d.DocType == doc.Key);
							<a href="@Url.Content(file.FilePath)" target="_blank" class="view-link">
								<i class="fas fa-eye"></i> Xem tài liệu
							</a>
						}
					</div>
				}
			</div>

			<!-- Action Buttons -->
			<div class="action-buttons-group">
				@if (Model.KycSubmission.Status == DataAccessLayer.Enums.KycStatus.Pending)
				{
					<button type="button" class="btn btn-success">
						<i class="fas fa-check"></i> Phê duyệt hồ sơ
					</button>
					<button type="button" class="btn btn-danger">
						<i class="fas fa-times"></i> Từ chối hồ sơ
					</button>
					@* <button type="button" class="btn btn-warning"> *@
					@*     <i class="fas fa-edit"></i> Yêu cầu chỉnh sửa *@
					@* </button> *@
				}
				else if (Model.KycSubmission.Status == DataAccessLayer.Enums.KycStatus.Approved)
				{
					@if (Model.Store.IsVerified)
					{
						<button type="button" class="btn btn-danger">
							<i class="fas fa-ban"></i> Hủy xác minh cửa hàng
						</button>
					}
					else
					{
						<button type="button" class="btn btn-success">
							<i class="fas fa-check-circle"></i> Xác minh cửa hàng
						</button>
					}
				}

				@* <button type="button" class="btn btn-outline"> *@
				@*     <i class="fas fa-download"></i> Tải xuống hồ sơ *@
				@* </button> *@
				@* <button type="button" class="btn btn-outline"> *@
				@*     <i class="fas fa-history"></i> Xem lịch sử thay đổi *@
				@* </button> *@
			</div>
		}
	</div>
</div>
<div class="modal fade" id="editStoreModal" tabindex="-1">
	<div class="modal-dialog modal-lg">
		<div class="modal-content" id="modalContent">
			<!-- nội dung partial sẽ được load vào đây -->
		</div>
	</div>
</div>

<script>
	document.getElementById("btnEditStore").addEventListener("click", function () {
		const id = this.getAttribute("data-id");

		fetch(`/Admin/Store/Edit/${id}`)
			.then(response => response.text())
			.then(html => {
				document.getElementById("modalContent").innerHTML = html;

				// Hiển thị modal (Bootstrap 5+)
				const modal = new bootstrap.Modal(document.getElementById("editStoreModal"));
				modal.show();
			})
			.catch(err => {
				console.error("Không thể load form chỉnh sửa:", err);
				alert("Đã xảy ra lỗi khi tải biểu mẫu chỉnh sửa.");
			});
	});

	document.addEventListener("submit", async function (e) {
		const form = e.target;
		if (form.id !== "editStoreForm") return;
		e.preventDefault();

		// Xóa lỗi cũ
		form.querySelectorAll("span.text-danger").forEach(el => el.textContent = "");

		// Lấy các checkbox được chọn
		const checkboxes = form.querySelectorAll("#serviceTypeCheckboxes input[type='checkbox']:checked");
		const selected = Array.from(checkboxes).map(c => parseInt(c.value));
		form.querySelector("#hiddenServiceTypes").value = JSON.stringify(selected);

		const id = form.querySelector("input[name='Id']").value;
		const formData = new FormData(form);

		try {
			const response = await fetch(`/Admin/Store/Edit/${id}`, {
				method: "POST",
				body: formData
			});

			const res = await response.json();

			if (res.success) {
				alert("✅ Cập nhật thành công!");
				location.reload();
			} else if (res.errors) {
				for (const [key, messages] of Object.entries(res.errors)) {
					const errorSpan = form.querySelector(`span[data-valmsg-for='${key}']`);
					if (errorSpan) errorSpan.textContent = messages.join(", ");
				}
			} else if (res.message) {
				alert(res.message);
			}
		} catch (err) {
			console.error(err);
			alert("❌ Lỗi khi gửi dữ liệu.");
		}
	});

	function prefillServiceTypes(serviceTypesJson) {
		try {
			const selected = JSON.parse(serviceTypesJson || "[]");
			selected.forEach(id => {
				const checkbox = document.querySelector(`#serviceTypeCheckboxes input[value='${id}']`);
				if (checkbox) checkbox.checked = true;
			});
		} catch {
			console.warn("ServiceTypes parse error");
		}
	}
	document.addEventListener("DOMContentLoaded", function () {
		const serviceTypesValue = "@(Model.Store.ServiceTypes ?? "[]")";
		prefillServiceTypes(serviceTypesValue);
	});
</script>
