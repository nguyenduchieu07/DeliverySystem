@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model DataAccessLayer.Entities.Warehouse
@using DataAccessLayer.Enums
@{
ViewBag.Title = "Chi tiết kho - " + Model.Name;
}

@section Styles {
    <style>
    :root {
        --success: #1cc88a;
        --warning: #f6c23e;
        --danger: #e74a3b;
        --info: #36b9cc;
        --text: #5a5c69;
        --border: #e3e6f0;
        --white: #ffffff;
        --shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
        --muted: #858796;
        --primary: #e5501b;
        --panel: #ffffff;
    }

    /* Tổng thể */
    .details-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 1.5rem;
    }

    /* Breadcrumb */
    .breadcrumb {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
        font-size: 0.875rem;
        color: var(--muted);
    }

    .breadcrumb a {
        color: var(--primary);
        text-decoration: none;
        transition: color 0.15s ease;
    }

    .breadcrumb a:hover {
        color: var(#d26c45);
        text-decoration: underline;
    }

    .breadcrumb span:last-child {
        color: var(--text);
        font-weight: 600;
    }

    /* Header */
    .page-header {
        background: var(--white);
        border: 1px solid var(--border);
        border-radius: 0.35rem;
        padding: 1.25rem;
        margin-bottom: 1.5rem;
        box-shadow: var(--shadow);
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 1.5rem;
        flex-wrap: wrap;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 400;
        color: var(--text);
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .page-meta {
        display: flex;
        gap: 1.5rem;
        flex-wrap: wrap;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.375rem;
        font-size: 0.875rem;
        color: var(--text);
    }

    /* Badge trạng thái */
    .status-badge {
        display: inline-block;
        padding: 0.375rem 0.875rem;
        border-radius: 10rem;
        font-size: 0.7rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-badge.approved,
    .status-badge.available {
        background: var(--success);
        color: var(--white);
    }

    .status-badge.pending {
        background: var(--warning);
        color: var(--white);
    }

    .status-badge.reserved,
    .status-badge.inuse {
        background: var(--info);
        color: var(--white);
    }

    .status-badge.maintenance {
        background: var(--danger);
        color: var(--white);
    }

    .status-badge.rejected {
        background: var(--muted);
        color: var(--white);
    }

    /* Nút */
    .page-actions {
        display: flex;
        gap: 0.75rem;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.5rem 1rem;
        border-radius: 0.35rem;
        font-size: 0.875rem;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.15s ease-in-out;
    }

    .btn-outline {
        background: var(--white);
        border: 1px solid var(--border);
        color: var(--text);
    }

    .btn-outline:hover {
        background: var(#f8f9fc);
        border-color: var(--primary);
        color: var(--primary);
        transform: translateY(-1px);
    }

    /* Chi tiết */
    .details-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 1.25rem;
    }

    .detail-card {
        flex: 1 1 48%;
        background: var(--white);
        border: 1px solid var(--border);
        border-radius: 0.35rem;
        box-shadow: var(--shadow);
        transition: all 0.15s ease-in-out;
        min-width: 350px;
    }


    .detail-card:hover {
        box-shadow: 0 0.5rem 2rem 0 rgba(58, 59, 69, 0.2);
    }

    .card-header {
        background: linear-gradient(180deg, var(--primary) 0%, var(#d26c45) 100%);
        color: var(--white);
        padding: 0.75rem 1.25rem;
        border-radius: 0.35rem 0.35rem 0 0;
    }
   

    .card-title {
        font-size: 1rem;
        font-weight: 700;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .card-body {
        padding: 1.25rem;
    }

    /* Danh sách thông tin */
    .info-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--border);
    }

    .info-item:last-child {
        border-bottom: none;
    }

    .info-label {
        font-size: 0.7rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: var(--muted);
    }

    .info-value {
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--text);
        text-align: right;
    }

    /* Hộp kích thước */
    .dimensions-box {
        text-align: center;
        padding: 1.5rem;
        background: var(#f8f9fc);
        border-radius: 0.35rem;
    }

    .dimensions-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary);
        margin-bottom: 0.5rem;
    }

    .dimensions-label {
        font-size: 0.875rem;
        color: var(--muted);
    }

    /* Hình ảnh */
    .image-gallery {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .gallery-item {
        aspect-ratio: 16/9;
        border-radius: 0.35rem;
        overflow: hidden;
        border: 1px solid var(--border);
    }

    .gallery-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .gallery-item img:hover {
        transform: scale(1.05);
    }

    .gallery-placeholder {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: var(#f8f9fc);
        color: var(--muted);
        gap: 0.5rem;
        font-size: 0.875rem;
    }

    .gallery-placeholder .icon {
        font-size: 2rem;
        opacity: 0.3;
    }

    /* Sơ đồ kho */
    .warehouse-map {
        background: var(--white);
        border: 1px solid var(--border);
        border-radius: 0.35rem;
        box-shadow: var(--shadow);
        margin-bottom: 1.5rem;
        padding: 1.25rem;
    }

    .map-header {
        margin-bottom: 1rem;
    }

    .map-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--text);
    }

    .map-legend {
        display: flex;
        gap: 1.5rem;
        flex-wrap: wrap;
        margin-bottom: 1.5rem;
        padding: 1rem;
        background: var(#f8f9fc);
        border-radius: 0.35rem;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        color: var(--text);
    }

    .slot-indicator {
        width: 16px;
        height: 16px;
        display: inline-block;
        border-radius: 4px;
        border: 1px solid;
    }

    /* Slot */
    .slot {
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        border: 1px solid var(--border);
        font-size: 11px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        user-select: none;
    }

    .slot:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .slot.available {
        background: #e8fff1;
        border-color: #22c55e;
        color: #15803d;
    }

    .slot.reserved {
        background: #e0f2fe;
        border-color: #3b82f6;
        color: #1d4ed8;
    }

    .slot.inuse {
        background: #fff7ed;
        border-color: #fb923c;
        color: #c2410c;
    }

    .slot.maintenance {
        background: #fee2e2;
        border-color: #ef4444;
        color: #b91c1c;
    }

    .slot.blocked {
        background: #f3f4f6;
        border-color: #d1d5db;
        color: #9ca3af;
        text-decoration: line-through;
        cursor: not-allowed;
    }

    /* Bảng slot */
    .slots-section {
        background: var(--panel);
        border: 1px solid var(--border);
        border-radius: 16px;
        overflow: hidden;
    }

    .slots-header {
        padding: 20px 24px;
        background: var(#f8f9fc);
        border-bottom: 1px solid var(--border);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .slots-title {
        font-size: 18px;
        font-weight: 600;
        color: var(--text);
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .slots-count {
        background: var(--primary);
        color: white;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 13px;
        font-weight: 500;
    }

    .table-container {
        overflow-x: auto;
    }

    .slots-table {
        width: 100%;
        border-collapse: collapse;
    }

    .slots-table thead {
        background: var(#f8f9fc);
    }

    .slots-table th {
        padding: 1rem 1.25rem;
        text-align: left;
        font-size: 0.7rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: var(--text);
        border-bottom: 2px solid var(--border);
    }

    .slots-table td {
        padding: 1rem 1.25rem;
        border-bottom: 1px solid var(--border);
        color: var(--text);
        font-size: 0.875rem;
    }

    .slots-table tbody tr:hover {
        background: var(#f8f9fc);
    }

    .slot-code {
        font-weight: 700;
        color: var(--primary);
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .details-container {
            padding: 1rem;
        }

        .page-header {
            flex-direction: column;
        }

        .page-actions {
            flex-direction: column;
            width: 100%;
        }

        .btn {
            justify-content: center;
            width: 100%;
        }

        .details-grid {
            grid-template-columns: 1fr;
        }

        .image-gallery {
            grid-template-columns: 1fr;
        }

        .map-legend {
            flex-direction: column;
            gap: 0.75rem;
        }
    }
    @@media (max-width: 900px) {
        .detail-card {
            flex: 1 1 100%;
        }
    }
</style>
}


<div class="details-container">
    <!-- Page Header -->
    <div class="page-header">
        <div class="page-info">
            <h1 class="page-title">
                📦 @Model.Name
                @{
                string GetStatusClass(StatusValue status)
                {
                return status switch
                {
                // For warehouse
                StatusValue.Approved => "approved",
                StatusValue.Pending => "pending",

                // For slot
                StatusValue.Available => "available",
                StatusValue.Reserved => "reserved",
                StatusValue.InUse => "inuse",
                StatusValue.Maintenance => "maintenance",

                _ => "rejected"
                };
                }
                }
                <span class="status-badge @GetStatusClass(Model.Status)">
                    @Model.Status.ToDisplayStringForWarehouse()
                </span>
            </h1>
            <div class="page-meta">
                <div class="meta-item">
                    <span class="icon">🏪</span>
                    <span>@(Model.Store?.StoreName ?? "N/A")</span>
                </div>
                <div class="meta-item">
                    <span class="icon">📍</span>
                    <span>@(Model.Address?.City ?? "Chưa có địa chỉ")</span>
                </div>
                <div class="meta-item">
                    <span class="icon">📅</span>
                    <span>@Model.CreatedAt.ToString("dd/MM/yyyy")</span>
                </div>
                <div class="meta-item">
                    <span class="icon">📦</span>
                    <span>@Model.Slots.Count slots</span>
                </div>
            </div>
        </div>
        <div class="page-actions">
            @if (Model.Status == StatusValue.Approved)
            {
            <a class="btn btn-outline" asp-area="Stores" asp-controller="Warehouse" asp-action="Edit" asp-route-id="@Model.Id">
                ✏️ Chỉnh sửa
            </a>
            }
            <a class="btn btn-outline" asp-area="Admin" asp-controller="Store" asp-action="Detail" asp-route-storeId="@Model.StoreId">
                ← Quay lại
            </a>
        </div>
    </div>

    <!-- Info Grid -->
    <div class="details-grid">
        <!-- General Info Card -->
        <div class="detail-card">
            <div class="card-header">
                <div class="card-title">
                    📋 Thông tin chung
                </div>
            </div>
            <div class="card-body">
                <div class="info-list">
                    <div class="info-item">
                        <span class="info-label">Tên kho</span>
                        <span class="info-value">@Model.Name</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Cửa hàng</span>
                        <span class="info-value">@(Model.Store?.StoreName ?? "—")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Địa chỉ</span>
                        <span class="info-value">@(Model.Address?.AddressLine ?? "—")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Thành phố</span>
                        <span class="info-value">@(Model.Address?.City ?? "—")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Tọa độ</span>
                        <span class="info-value">
                            @if (Model.Address?.Latitude != null && Model.Address?.Longitude != null)
                            {
                            <text>@Model.Address.Latitude, @Model.Address.Longitude</text>
                            }
                            else
                            {
                            <text>—</text>
                            }
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Dimensions Card -->
        <div class="detail-card">
            <div class="card-header">
                <div class="card-title">
                    📐 Kích thước & Hình ảnh
                </div>
            </div>
            <div class="card-body">
                @{
                var h = (double?)Model?.HeightM ?? 0;
                var l = (double?)Model?.LengthM ?? 0;
                var w = (double?)Model?.WidthM ?? 0;
                var hasDims = h > 0 && l > 0 && w > 0;
                }
                @if (hasDims)
                {
                <div class="dimensions-box">
                    <div class="dimensions-value">
                        @Math.Round(h * l * w, 2) m³
                    </div>
                    <div class="dimensions-label">
                        @h × @l × @w mét
                    </div>
                </div>
                }
                else
                {
                <div class="dimensions-box">
                    <div class="dimensions-value">—</div>
                    <div class="dimensions-label">Chưa có kích thước</div>
                </div>
                }

                <div class="image-gallery" style="margin-top: 20px;">
                    <div class="gallery-item">
                        @if (!string.IsNullOrWhiteSpace(Model.CoverImageUrl))
                        {
                        <img src="@Model.CoverImageUrl" alt="Cover" />
                        }
                        else
                        {
                        <div class="gallery-placeholder">
                            <span class="icon">📷</span>
                            <span>Ảnh bìa</span>
                        </div>
                        }
                    </div>
                    <div class="gallery-item">
                        @if (!string.IsNullOrWhiteSpace(Model.MapImageUrl))
                        {
                        <img src="@Model.MapImageUrl" alt="Map" />
                        }
                        else
                        {
                        <div class="gallery-placeholder">
                            <span class="icon">🗺️</span>
                            <span>Sơ đồ kho</span>
                        </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="detail-card">
        <div class="warehouse-map">
            <div class="map-header">
                <h3 class="map-title">🗺️ Sơ đồ kho</h3>
            </div>
            <div class="map-legend">
                <div class="legend-item">
                    <span class="slot-indicator available" style="background: #e8fff1; border-color: #22c55e;"></span>
                    <span>Trống</span>
                </div>
                <div class="legend-item">
                    <span class="slot-indicator occupied" style="background: #e0f2fe; border-color: #3b82f6;"></span>
                    <span>Giữ  chỗ</span>
                </div>
                <div class="legend-item">
                    <span class="slot-indicator occupied" style="background: #fff6e0; border-color: #f59e0b;"></span>
                    <span>Đang sử dụng</span>
                </div>
                <div class="legend-item">
                    <span class="slot-indicator maintenance" style="background: #ffe5e5; border-color: #ef4444;"></span>
                    <span>Bảo trì</span>
                </div>
                <div class="legend-item">
                    <span class="slot-indicator blocked" style="background: #f3f4f6; border-color: #d1d5db;"></span>
                    <span>Khóa</span>
                </div>
            </div>
            <div id="slotGrid" style="display:grid; gap:8px;"></div>
        </div>
    </div>
    

    <!-- Slots Table -->
    <div class="slots-section">
        <div class="slots-header">
            <div class="slots-title">
                📦 Danh sách Slots
                <span class="slots-count">@ViewBag.TotalSlots</span>
            </div>
        </div>

        <div class="table-container">
            @if (Model.Slots == null || Model.Slots.Count == 0)
            {
            <div style="text-align: center; padding: 40px; color: var(--muted);">
                <div style="font-size: 48px; opacity: 0.3; margin-bottom: 16px;">📦</div>
                <div>Chưa có slot nào</div>
            </div>
            }
            else
            {
            <table class="slots-table">
                <thead>
                <tr>
                    <th>Mã slot</th>
                    <th>Vị trí</th>
                    <th>Kích thước</th>
                    <th>Giá/giờ</th>
                    <th>Trạng thái</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var s in Model.Slots)
                {
                var statusText = s.Status.ToString();
                <tr>
                    <td class="slot-code">@s.Code</td>
                    <td>Hàng @s.Row, Cột @s.Col</td>
                    <td class="slot-dimensions">@s.HeightM × @s.LengthM × @s.WidthM m</td>
                    <td class="slot-price">@s.BasePricePerHour.ToString("N0") ₫</td>
                    <td>
                                    <span class="status-badge @GetStatusClass(s.Status)">
                                        @s.Status.ToDisplayStringForWarehouseSlot()
                                    </span>
                    </td>
                </tr>
                }
                </tbody>
            </table>
            }
        </div>

    </div>
</div>

@section Scripts {
<script>
    (async function () {
        const root = document.getElementById('slotGrid');
        if (!root) return;

        // Gọi API lấy sơ đồ kho
        const res = await fetch('@Url.Action("Grid", "Warehouse", new { area = "Stores", warehouseId = Model.Id })');
        if (!res.ok) {
            root.innerHTML = '<div style="text-align:center;color:var(--muted);">Không tải được sơ đồ.</div>';
            return;
        }

        const data = await res.json();

        // Hàm lấy thuộc tính từ cả camelCase & PascalCase
        const pick = (o, camel, pascal) => (o && (camel in o)) ? o[camel] : (o ? o[pascal] : undefined);

        const cellsRaw = pick(data, 'cells', 'Cells') || [];
        const rowsInput = pick(data, 'rows', 'Rows');
        const colsInput = pick(data, 'cols', 'Cols');

        // Map dữ liệu cell
        const cells = cellsRaw.map(c => ({
            row: pick(c, 'row', 'Row') ?? 0,
            col: pick(c, 'col', 'Col') ?? 0,
            code: pick(c, 'code', 'Code') ?? '',
            status: pick(c, 'status', 'Status') ?? 'available',
            pricePreview: pick(c, 'pricePreview', 'PricePreview')
        }));

        const rows = Number(rowsInput ?? (cells.length ? Math.max(...cells.map(x => Number(x.row) || 0)) : 0));
        const cols = Number(colsInput ?? (cells.length ? Math.max(...cells.map(x => Number(x.col) || 0)) : 0));

        if (!rows || !cols) {
            root.innerHTML = '<div style="text-align:center;color:var(--muted);">Chưa có cấu hình sơ đồ.</div>';
            return;
        }

        // Cấu hình lưới hiển thị
        root.style.display = 'grid';
        root.style.gridTemplateColumns = `repeat(${cols}, 44px)`;
        root.style.gap = '8px';

        // Map vị trí cell
        const map = new Map(cells.map(c => [`${c.row}_${c.col}`, c]));

        // Vẽ từng ô
        for (let r = 1; r <= rows; r++) {
            for (let c = 1; c <= cols; c++) {
                const key = `${r}_${c}`;
                const cell = map.get(key);

                const el = document.createElement('div');
                const state = cell?.status ?? 'available'; // Lấy status từ backend

                el.className = 'slot ' + state;
                el.textContent = cell?.code || '';

                const priceText = (cell?.pricePreview != null && cell.pricePreview !== '')
                    ? `\n${Number(cell.pricePreview).toLocaleString('vi-VN')} đ/giờ`
                    : '';
                el.title = cell?.code ? (cell.code + priceText) : `R${r}C${c}`;

                root.appendChild(el);
            }
        }
    })();
</script>

}