// <auto-generated />
using System;
using DataAccessLayer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(DeliverySytemContext))]
    partial class DeliverySytemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ward")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id")
                        .HasName("PK__Addresse__091C2AFB08EA6C9D");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa20"),
                            Active = true,
                            AddressLine = "12 Nguyễn Huệ",
                            City = "Hồ Chí Minh",
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8313),
                            District = "Q.1",
                            IsDefault = true,
                            Label = "Store HQ",
                            Latitude = 10.772,
                            Longitude = 106.70399999999999,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            Ward = "Bến Nghé"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa21"),
                            Active = true,
                            AddressLine = "89 Trần Hưng Đạo",
                            City = "Hà Nội",
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8321),
                            District = "Hoàn Kiếm",
                            IsDefault = true,
                            Label = "Home Pickup",
                            Latitude = 21.026,
                            Longitude = 105.84099999999999,
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa02"),
                            Ward = "Cửa Nam"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa22"),
                            Active = true,
                            AddressLine = "25 Lê Duẩn",
                            City = "Hồ Chí Minh",
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8324),
                            District = "Q.1",
                            IsDefault = false,
                            Label = "New Apartment",
                            Latitude = 10.782,
                            Longitude = 106.7,
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa02"),
                            Ward = "Bến Nghé"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeaf")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Slug")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Path");

                    b.HasIndex("ParentId", "SortOrder");

                    b.HasIndex("StoreId", "Slug")
                        .IsUnique()
                        .HasFilter("[StoreId] IS NOT NULL AND [Slug] IS NOT NULL");

                    b.ToTable("Categories", t =>
                        {
                            t.HasCheckConstraint("CK_Category_Parent_Not_Self", "[ParentId] IS NULL OR [ParentId] <> [Id]");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5200),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Dịch vụ vận chuyển",
                            Slug = "van-chuyen",
                            SortOrder = 1,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa2-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5207),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Lưu kho",
                            Slug = "luu-kho",
                            SortOrder = 2,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa3-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5209),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Dọn dẹp",
                            Slug = "don-dep",
                            SortOrder = 3,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5211),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Chuyển nhà",
                            ParentId = new Guid("aaaaaaa1-0000-0000-0000-000000000001"),
                            Slug = "chuyen-nha",
                            SortOrder = 1,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5215),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Chuyển văn phòng",
                            ParentId = new Guid("aaaaaaa1-0000-0000-0000-000000000001"),
                            Slug = "chuyen-van-phong",
                            SortOrder = 2,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5217),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Xe tải theo km",
                            ParentId = new Guid("aaaaaaa1-0000-0000-0000-000000000001"),
                            Slug = "xe-tai-theo-km",
                            SortOrder = 3,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa2-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5219),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Theo giờ",
                            ParentId = new Guid("aaaaaaa2-0000-0000-0000-000000000001"),
                            Slug = "theo-gio",
                            SortOrder = 1,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa2-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5221),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Theo ngày",
                            ParentId = new Guid("aaaaaaa2-0000-0000-0000-000000000001"),
                            Slug = "theo-ngay",
                            SortOrder = 2,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa3-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5222),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Vệ sinh nhà",
                            ParentId = new Guid("aaaaaaa3-0000-0000-0000-000000000001"),
                            Slug = "ve-sinh-nha",
                            SortOrder = 1,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa3-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 191, DateTimeKind.Local).AddTicks(5224),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Vệ sinh văn phòng",
                            ParentId = new Guid("aaaaaaa3-0000-0000-0000-000000000001"),
                            Slug = "ve-sinh-van-phong",
                            SortOrder = 2,
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa10"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8406),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Moving",
                            Status = 8
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa11"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8622),
                            IsActive = true,
                            IsLeaf = false,
                            Level = 0,
                            Name = "Storage",
                            Status = 8
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("KycLevel")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("None");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredLang")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Tier")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Basic");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Customer__A4AE64D8B858128B");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa02"),
                            CreatedAt = new DateTime(2025, 9, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "a@gmail.com",
                            FullName = "Nguyễn Văn A",
                            KycLevel = "None",
                            PhoneNumber = "0123456789",
                            PreferredLang = "vi",
                            Tier = "Basic"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("ToStoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Feedback__6A4BEDD68F15C3E7");

                    b.HasIndex("FromUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ToStoreId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa50"),
                            Comment = "Very smooth job!",
                            CreatedAt = new DateTime(2025, 9, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            FromUserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa02"),
                            OrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa32"),
                            Rating = 5,
                            ToStoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3")
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.KycDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KycSubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KycSubmissionId");

                    b.ToTable("KycDocuments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc1"),
                            CreatedAt = new DateTime(2025, 10, 16, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8095),
                            DocType = "License",
                            FilePath = "/uploads/kyc/blue/license.pdf",
                            KycSubmissionId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb1")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc2"),
                            CreatedAt = new DateTime(2025, 10, 16, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8099),
                            DocType = "ID",
                            FilePath = "/uploads/kyc/blue/id.jpg",
                            KycSubmissionId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb1")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc3"),
                            CreatedAt = new DateTime(2025, 10, 16, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8101),
                            DocType = "Tax",
                            FilePath = "/uploads/kyc/blue/tax.pdf",
                            KycSubmissionId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb1")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc4"),
                            CreatedAt = new DateTime(2025, 10, 17, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8103),
                            DocType = "License",
                            FilePath = "/uploads/kyc/fresh/license.pdf",
                            KycSubmissionId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb2")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc5"),
                            CreatedAt = new DateTime(2025, 10, 17, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8106),
                            DocType = "ID",
                            FilePath = "/uploads/kyc/fresh/id.jpg",
                            KycSubmissionId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb2")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc6"),
                            CreatedAt = new DateTime(2025, 10, 7, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8108),
                            DocType = "License",
                            FilePath = "/uploads/kyc/prime/license.pdf",
                            KycSubmissionId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb3")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc7"),
                            CreatedAt = new DateTime(2025, 10, 7, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8110),
                            DocType = "ID",
                            FilePath = "/uploads/kyc/prime/id.jpg",
                            KycSubmissionId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb3")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc8"),
                            CreatedAt = new DateTime(2025, 10, 7, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8112),
                            DocType = "Tax",
                            FilePath = "/uploads/kyc/prime/tax.pdf",
                            KycSubmissionId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb3")
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.KycSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("Status", "SubmittedAt");

                    b.ToTable("KycSubmissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb1"),
                            CreatedAt = new DateTime(2025, 10, 16, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8033),
                            Status = 0,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa1"),
                            SubmittedAt = new DateTime(2025, 10, 16, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8029)
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb2"),
                            AdminNote = "Thiếu giấy tờ thuế / ảnh mờ, vui lòng bổ sung.",
                            CreatedAt = new DateTime(2025, 10, 17, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8042),
                            ReviewedAt = new DateTime(2025, 10, 18, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8037),
                            ReviewedBy = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Status = 1,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa2"),
                            SubmittedAt = new DateTime(2025, 10, 17, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8036)
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb3"),
                            AdminNote = "Ok",
                            CreatedAt = new DateTime(2025, 10, 7, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8052),
                            ReviewedAt = new DateTime(2025, 10, 8, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8051),
                            ReviewedBy = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Status = 2,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            SubmittedAt = new DateTime(2025, 10, 7, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(8050)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DistanceKm")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<Guid?>("DropoffAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EtaMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PickupAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("int")
                        .HasDefaultValue(19);

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Orders__C3905BCF19CCE46F");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DropoffAddressId");

                    b.HasIndex("PickupAddressId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa30"),
                            CreatedAt = new DateTime(2025, 8, 15, 9, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa02"),
                            DistanceKm = 7.2m,
                            DropoffAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa22"),
                            EtaMinutes = 55,
                            Note = "August order",
                            PickupAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa21"),
                            Status = 14,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            TotalAmount = 2200000m,
                            UpdatedAt = new DateTime(2025, 8, 15, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa31"),
                            CreatedAt = new DateTime(2025, 9, 29, 14, 30, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa02"),
                            DistanceKm = 5.1m,
                            DropoffAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa22"),
                            EtaMinutes = 45,
                            Note = "Yesterday pending",
                            PickupAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa21"),
                            Status = 0,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            TotalAmount = 1500000m,
                            UpdatedAt = new DateTime(2025, 9, 29, 14, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa32"),
                            CreatedAt = new DateTime(2025, 9, 30, 8, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa02"),
                            DistanceKm = 3.4m,
                            DropoffAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa22"),
                            EtaMinutes = 35,
                            Note = "Today completed",
                            PickupAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa21"),
                            Status = 14,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            TotalAmount = 2000000m,
                            UpdatedAt = new DateTime(2025, 9, 30, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa33"),
                            CreatedAt = new DateTime(2025, 9, 30, 9, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa02"),
                            DistanceKm = 9.0m,
                            DropoffAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa22"),
                            EtaMinutes = 70,
                            Note = "Today pending",
                            PickupAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa21"),
                            Status = 0,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            TotalAmount = 3100000m,
                            UpdatedAt = new DateTime(2025, 9, 30, 9, 40, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__OrderIte__57ED0681941C3C3C");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa40"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8925),
                            OrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa30"),
                            Quantity = 1,
                            ServiceId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa12"),
                            Subtotal = 2200000m,
                            UnitPrice = 2200000m
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa41"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8930),
                            OrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa31"),
                            Quantity = 1,
                            ServiceId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa12"),
                            Subtotal = 1200000m,
                            UnitPrice = 1200000m
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa42"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8932),
                            OrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa31"),
                            Quantity = 1,
                            ServiceId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa13"),
                            Subtotal = 300000m,
                            UnitPrice = 300000m
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa43"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8933),
                            OrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa32"),
                            Quantity = 1,
                            ServiceId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa12"),
                            Subtotal = 2000000m,
                            UnitPrice = 2000000m
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Provider")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ProviderTxnId")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Payments__9B556A3861C7126E");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(20);

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Quotatio__E1975293941AD414");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PricingModel")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("Job");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Services__C51BB00A8BC5FA65");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa12"),
                            BasePrice = 1500000m,
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa10"),
                            CreatedAt = new DateTime(2025, 8, 15, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Local moving inside city",
                            IsActive = true,
                            Name = "House Moving (City)",
                            PricingModel = 3,
                            Status = 0,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            Unit = "Job"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa13"),
                            BasePrice = 300000m,
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa10"),
                            CreatedAt = new DateTime(2025, 8, 15, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Boxes & packing",
                            IsActive = true,
                            Name = "Packing Service",
                            PricingModel = 3,
                            Status = 0,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            Unit = "Package"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ServiceAddon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId", "Name")
                        .IsUnique();

                    b.ToTable("ServiceAddons");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ServicePriceRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplyModel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MaxAreaM2")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("MaxDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxVolumeM3")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("MinAreaM2")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("MinDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinVolumeM3")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimeUnit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId", "ValidFrom", "ValidTo");

                    b.HasIndex("ServiceId", "MinVolumeM3", "MaxVolumeM3", "MinDays", "MaxDays");

                    b.ToTable("PriceRules", t =>
                        {
                            t.HasCheckConstraint("CK_ServicePriceRule_Ranges", "\r\n            (MinVolumeM3 IS NULL OR MaxVolumeM3 IS NULL OR MinVolumeM3 <= MaxVolumeM3) AND\r\n            (MinAreaM2  IS NULL OR MaxAreaM2  IS NULL OR MinAreaM2  <= MaxAreaM2)  AND\r\n            (MinQty     IS NULL OR MaxQty     IS NULL OR MinQty     <= MaxQty)     AND\r\n            (MinDays    IS NULL OR MaxDays    IS NULL OR MinDays    <= MaxDays)\r\n        ");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa14"),
                            ApplyModel = 3,
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(8786),
                            MaxQty = 10m,
                            MinQty = 3m,
                            Price = 280000m,
                            ServiceId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa13"),
                            TimeUnit = 0,
                            ValidFrom = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidTo = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ServiceSizeOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AreaM2")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("MaxWeightKg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceOverride")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("VolumeM3")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId", "Code")
                        .IsUnique();

                    b.ToTable("ServiceSizeOptions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SlotReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WarehouseSlotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("WarehouseSlotId", "ExpiresAt");

                    b.ToTable("SlotReservations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActiveRegions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("KycLevel")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("None");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LegalName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LicenseExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("MaxOrdersPerDay")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RatingAvg")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("ServiceTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Stores__3B82F101588E2030");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa1"),
                            CreatedAt = new DateTime(2025, 10, 22, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(7881),
                            IsVerified = false,
                            OwnerUserId = new Guid("22222222-2222-2222-2222-222222222221"),
                            RatingAvg = 0m,
                            RatingCount = 0,
                            Status = 9,
                            StoreName = "Blue Wash",
                            UpdatedAt = new DateTime(2025, 10, 22, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(7882)
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa2"),
                            CreatedAt = new DateTime(2025, 10, 22, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(7891),
                            IsVerified = false,
                            OwnerUserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            RatingAvg = 0m,
                            RatingCount = 0,
                            Status = 9,
                            StoreName = "Fresh Laundry",
                            UpdatedAt = new DateTime(2025, 10, 22, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(7891)
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            ActiveRegions = "HN,HCM",
                            CreatedAt = new DateTime(2025, 9, 22, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(7896),
                            IsVerified = false,
                            KycLevel = "Verified",
                            MaxOrdersPerDay = 80,
                            OwnerUserId = new Guid("22222222-2222-2222-2222-222222222223"),
                            RatingAvg = 0m,
                            RatingCount = 0,
                            Status = 8,
                            StoreName = "Prime Cleaners",
                            UpdatedAt = new DateTime(2025, 10, 22, 4, 7, 35, 348, DateTimeKind.Utc).AddTicks(7909)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.StoreStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__StoreSta__96D4AB1701A0B50F");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "StoreId", "UserId" }, "UQ_StoreStaff")
                        .IsUnique();

                    b.ToTable("StoreStaff", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ce12557-24e5-4d7f-ac18-554962ee6770",
                            CreatedAt = new DateTime(2025, 10, 22, 4, 7, 35, 191, DateTimeKind.Utc).AddTicks(4356),
                            Email = "store1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "store1@gmail.com",
                            NormalizedUserName = "store1",
                            PasswordHash = "AQAAAAIAAYagAAAAEF9FnLhKeB7kwmgm6GWttptSABjTcY2wv2lDdBGe8MPPPDP3PphHjGS2fWpD93Nu3Q==",
                            PhoneNumberConfirmed = false,
                            Status = 8,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 22, 4, 7, 35, 191, DateTimeKind.Utc).AddTicks(4362),
                            UserName = "store1"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ead1d32-2520-42ac-925c-011d6459feb2",
                            CreatedAt = new DateTime(2025, 10, 22, 4, 7, 35, 268, DateTimeKind.Utc).AddTicks(7407),
                            Email = "SystemAdmin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SystemAdmin@gmail.com",
                            NormalizedUserName = "SystemAdmin",
                            PasswordHash = "AQAAAAIAAYagAAAAEGC+prIck85bTwzcm2ojcgCj17S9wJC1A1tTxO57PoehMsonzDXky9JLd3i2/GhQnQ==",
                            PhoneNumberConfirmed = false,
                            Status = 8,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 22, 4, 7, 35, 268, DateTimeKind.Utc).AddTicks(7415),
                            UserName = "SystemAdmin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222221"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "con-blue",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owner.blue@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER.BLUE@DEMO.LOCAL",
                            NormalizedUserName = "BLUEOWNER",
                            PasswordHash = "AQAAAAIAAYagAAAAELgVs9gHSgUtNBPx17JWh0mVXBLKd1xMdLvvuzW0xGRN9Aoe5i082zCrCwB9qaH1JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "sec-blue",
                            Status = 8,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "blueowner"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "con-fresh",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owner.fresh@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER.FRESH@DEMO.LOCAL",
                            NormalizedUserName = "FRESHOWNER",
                            PasswordHash = "AQAAAAIAAYagAAAAELgVs9gHSgUtNBPx17JWh0mVXBLKd1xMdLvvuzW0xGRN9Aoe5i082zCrCwB9qaH1JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "sec-fresh",
                            Status = 8,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "freshowner"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222223"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "con-prime",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owner.prime@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER.PRIME@DEMO.LOCAL",
                            NormalizedUserName = "PRIMEOWNER",
                            PasswordHash = "AQAAAAIAAYagAAAAELgVs9gHSgUtNBPx17JWh0mVXBLKd1xMdLvvuzW0xGRN9Aoe5i082zCrCwB9qaH1JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "sec-prime",
                            Status = 8,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "primeowner"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa01"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "222ed2f0-88de-429b-a410-01ed310c4355",
                            CreatedAt = new DateTime(2025, 9, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "owner@test.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@TEST.LOCAL",
                            NormalizedUserName = "STOREOWNER",
                            PasswordHash = "AQAAAA...",
                            PhoneNumberConfirmed = false,
                            Status = 8,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 9, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "storeowner"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa02"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25b7e0e7-465a-4644-9591-110c8839029d",
                            CreatedAt = new DateTime(2025, 9, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "cust1@test.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUST1@TEST.LOCAL",
                            NormalizedUserName = "CUSTOMER1",
                            PasswordHash = "AQAAAA...",
                            PhoneNumberConfirmed = false,
                            Status = 8,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 9, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "customer1"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("VND");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(8);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Wallets__84D4F90EC8015006");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderTxnId")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(21);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__WalletTr__C19608541DF87B9D");

                    b.HasIndex("OrderId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HeightM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LengthM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MapImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WidthM")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddressRefId");

                    b.HasIndex("StoreId", "Name");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa60"),
                            AddressRefId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa20"),
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(9033),
                            HeightM = 0m,
                            LengthM = 0m,
                            Name = "Main Warehouse",
                            Status = 0,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            WidthM = 0m
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WarehouseSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Col")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HeightM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LeaseEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaseStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LengthM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WidthM")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId", "Code")
                        .IsUnique();

                    b.HasIndex("WarehouseId", "Status");

                    b.ToTable("WarehouseSlots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa61"),
                            BasePricePerHour = 0m,
                            Code = "A1",
                            Col = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(9082),
                            HeightM = 0m,
                            IsBlocked = false,
                            LengthM = 0m,
                            Row = 0,
                            Status = 4,
                            WarehouseId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa60"),
                            WidthM = 0m
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa62"),
                            BasePricePerHour = 0m,
                            Code = "A2",
                            Col = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(9088),
                            CurrentOrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa31"),
                            HeightM = 0m,
                            IsBlocked = false,
                            LengthM = 0m,
                            Row = 0,
                            Status = 5,
                            WarehouseId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa60"),
                            WidthM = 0m
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa63"),
                            BasePricePerHour = 0m,
                            Code = "B1",
                            Col = 0,
                            CreatedAt = new DateTime(2025, 10, 22, 11, 7, 35, 348, DateTimeKind.Local).AddTicks(9089),
                            HeightM = 0m,
                            IsBlocked = false,
                            LengthM = 0m,
                            Row = 0,
                            Status = 4,
                            WarehouseId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa60"),
                            WidthM = 0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000001"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000002"),
                            Name = "Store",
                            NormalizedName = "STORE"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000004"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa1-0000-0000-0000-000000000003"),
                            Name = "StoreStaff",
                            NormalizedName = "StoreStaff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aaaaaaa1-0000-0000-0000-000000000001"),
                            RoleId = new Guid("aaaaaaa1-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaa1-0000-0000-0000-000000000002"),
                            RoleId = new Guid("aaaaaaa1-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("22222222-2222-2222-2222-222222222221"),
                            RoleId = new Guid("aaaaaaa1-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            RoleId = new Guid("aaaaaaa1-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("22222222-2222-2222-2222-222222222223"),
                            RoleId = new Guid("aaaaaaa1-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Address", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Store", "Store")
                        .WithMany("Addresses")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Addresses_Stores");

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Addresses_Users");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Category", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccessLayer.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Parent");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Customer", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("DataAccessLayer.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customers_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Feedback", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "FromUser")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FromUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedbacks_Users");

                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedbacks_Orders");

                    b.HasOne("DataAccessLayer.Entities.Store", "ToStore")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ToStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedbacks_Stores");

                    b.Navigation("FromUser");

                    b.Navigation("Order");

                    b.Navigation("ToStore");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.KycDocument", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.KycSubmission", "KycSubmission")
                        .WithMany("Documents")
                        .HasForeignKey("KycSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KycSubmission");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.KycSubmission", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Customers");

                    b.HasOne("DataAccessLayer.Entities.Address", "DropoffAddress")
                        .WithMany("OrderDropoffAddresses")
                        .HasForeignKey("DropoffAddressId")
                        .HasConstraintName("FK_Orders_Dropoff");

                    b.HasOne("DataAccessLayer.Entities.Address", "PickupAddress")
                        .WithMany("OrderPickupAddresses")
                        .HasForeignKey("PickupAddressId")
                        .HasConstraintName("FK_Orders_Pickup");

                    b.HasOne("DataAccessLayer.Entities.Quotation", "Quotation")
                        .WithMany("Orders")
                        .HasForeignKey("QuotationId")
                        .HasConstraintName("FK_Orders_Quotations");

                    b.HasOne("DataAccessLayer.Entities.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Stores");

                    b.Navigation("Customer");

                    b.Navigation("DropoffAddress");

                    b.Navigation("PickupAddress");

                    b.Navigation("Quotation");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItem", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Orders");

                    b.HasOne("DataAccessLayer.Entities.Service", "Service")
                        .WithMany("OrderItems")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Services");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Payment", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_Orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Quotation", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("Quotations")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Quotations_Customers");

                    b.HasOne("DataAccessLayer.Entities.Store", "Store")
                        .WithMany("Quotations")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Quotations_Stores");

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Service", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Services_Categories");

                    b.HasOne("DataAccessLayer.Entities.Store", "Store")
                        .WithMany("Services")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Services_Stores");

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ServiceAddon", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Service", "Service")
                        .WithMany("Addons")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ServicePriceRule", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Service", "Service")
                        .WithMany("PriceRules")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ServiceSizeOption", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Service", "Service")
                        .WithMany("SizeOptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SlotReservation", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.WarehouseSlot", null)
                        .WithMany()
                        .HasForeignKey("WarehouseSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Store", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "OwnerUser")
                        .WithMany("Stores")
                        .HasForeignKey("OwnerUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Stores_Users");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.StoreStaff", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Store", "Store")
                        .WithMany("StoreStaffs")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_StoreStaff_Stores");

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("StoreStaffs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_StoreStaff_Users");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WalletTransaction", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_WalletTransactions_Orders");

                    b.HasOne("DataAccessLayer.Entities.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_WalletTransactions_Wallets");

                    b.Navigation("Order");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Warehouse", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressRefId");

                    b.HasOne("DataAccessLayer.Entities.Store", "Store")
                        .WithMany("Warehouses")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WarehouseSlot", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Warehouse", "Warehouse")
                        .WithMany("Slots")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Address", b =>
                {
                    b.Navigation("OrderDropoffAddresses");

                    b.Navigation("OrderPickupAddresses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Category", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.KycSubmission", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderItems");

                    b.Navigation("Payments");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Quotation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Service", b =>
                {
                    b.Navigation("Addons");

                    b.Navigation("OrderItems");

                    b.Navigation("PriceRules");

                    b.Navigation("SizeOptions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Store", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Quotations");

                    b.Navigation("Services");

                    b.Navigation("StoreStaffs");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Customer");

                    b.Navigation("Feedbacks");

                    b.Navigation("StoreStaffs");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Wallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Warehouse", b =>
                {
                    b.Navigation("Slots");
                });
#pragma warning restore 612, 618
        }
    }
}
